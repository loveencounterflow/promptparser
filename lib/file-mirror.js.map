{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/file-mirror.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,IAAA,EAAA,YAAA,EAAA,EAAA,EAAA,WAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAR5B,EALA;;;EAeA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,IAAF,CAAA,GAA4B,GAAG,CAAC,KAAhC;;EACA,CAAA,CAAE,CAAF,CAAA,GAA4B,OAAA,CAAQ,aAAR,CAA5B;;EACA,CAAA,CAAE,IAAF,CAAA,GAA4B,OAAA,CAAQ,MAAR,CAA5B;;EACA,CAAA,CAAE,GAAF,CAAA,GAA4B,IAA5B;;EACA,IAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,SAAR,CAA5B;;EACA,KAAA,GAA4B,SAAA,CAAA;;EAC5B,CAAA,CAAE,KAAF,CAAA,GAA4B,OAAA,CAAQ,YAAR,CAA5B,EA3BA;;;;;;;;;;;;;;;;;;;;EAkDM,eAAN,MAAA,aAAA,CAAA;;;;;;IAOE,WAAa,CAAA,CAAA;MACX,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAiB,SAAA,CAAA,CAAjB,EAAJ;;AAEI,aAAO;IAHI;;EAPf;;EA4BM;;;;;;;;;;;;;;IAAN,MAAA,YAAA,QAA0B,aAA1B,CAAA;;;MAOE,WAAa,CAAE,OAAF,EAAW,eAAX,EAA4B,WAAW,KAAvC,CAAA;aACX,CAAA;QACA,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAiB,SAAA,CAAA,CAAjB;QACA,IAAC,CAAA,GAAD,GAAQ,IAAC,CAAA,KAAK,CAAC,MAAM,CAAC,kBAAd,CAAiC,OAAjC,EAA0C,eAA1C,EAA2D,QAA3D;QACR,IAAC,CAAA,sBAAD,CAAA,EAHJ;;QAKI,IAAA,CAAK,IAAL,EAAQ,KAAR,EAAe,IAAI,IAAJ,CAAS;UAAE,IAAA,EAAM,IAAC,CAAA,GAAG,CAAC;QAAb,CAAT,CAAf,EALJ;;;QAQI,IAAC,CAAA,sBAAD,CAAA;QACA,IAAC,CAAA,iCAAD,CAAA;QACA,IAAgC,GAAI,CAAA,MAAJ,KAAc,WAA9C;UAAA,IAAC,CAAA,yBAAD,CAAA,EAAA;SAVJ;;AAYI,eAAO;MAbI,CALf;;;MAqBE,sBAAwB,CAAA,CAAA;QACtB,KAAgB,IAAC,CAAA,GAAG,CAAC,QAArB;AAAA,iBAAO,EAAP;;AACA,eAAO,KAAA,CAAM,IAAC,CAAA,GAAG,CAAC,OAAX;MAFe,CArB1B;;;MA0BE,sBAAwB,CAAA,CAAA,EAAA;;;;;;;;;;;;;;AActB,eAAO;MAde,CA1B1B;;;MA2CE,yBAA2B,CAAA,CAAA;AAAE,YAAA;eAAC,IAAI,GAAJ,CAAQ;;AACpC;AAAA;UAAA,KAAA,qCAAA;;0EAA2B;UAA3B,CAAA;;qBADoC,CACgD,CAAC,IADjD,CAAA,CAAR;MAAH,CA3C7B;;;MA+CE,iCAAmC,CAAA,CAAA;QACjC,IAAG,CAAC,CAAC,sBAAF,CAAyB,IAAC,CAAA,GAA1B,EAA+B,IAAC,CAAA,WAAW,CAAC,oBAA5C,CAAH;UACE,OAAA,CAAQ,OAAR,EAAiB,CAAA,+DAAA,CAAA,CAAkE,IAAC,CAAA,GAAG,CAAC,OAAvE,CAAA,CAAjB,EADF;SAAA,MAAA;UAGE,OAAA,CAAQ,OAAR,EAAiB,CAAA,4EAAA,CAAA,CAA+E,IAAC,CAAA,GAAG,CAAC,OAApF,CAAA,CAAjB;UACA,IAAC,CAAA,oBAAD,CAAA,EAJF;SAAJ;;AAMI,eAAO;MAP0B,CA/CrC;;;MAyDE,SAAY,CAAA,CAAA,EAAA;;;QAGV,IAAC,CAAA,GAAD,CAAK,CAAA,CAAA,GAAA;iBACH,IAAC,CAAA,GAAD,CAAK,GAAG,CAAA,6BAAA,CAAR;QADG,CAAL,EAFJ;;AAKI,eAAO;MANG,CAzDd;;;MAkEE,oBAAsB,CAAA,CAAA;QACpB,OAAA,CAAQ,OAAR,EAAiB,mCAAjB;QACA,IAAC,CAAA,SAAD,CAAA;QACA,IAAC,CAAA,GAAD,CAAK,CAAA,CAAA,GAAA,EAAA;;;UAGH,IAAC,CAAA,GAAD,CAAK,GAAG,CAAA;;iCAAA,CAAR,EAFN;;;UAQM,IAAA,CAAK,IAAL,EAAQ,cAAR,EACE;YAAA,cAAA,EAAqB,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB;cAAE,IAAA,EAAM;YAAR,CAAnB;UAArB,CADF,EARN;;AAWM,iBAAO;QAZJ,CAAL;AAaA,eAAO;MAhBa,CAlExB;;;MAqFE,yBAA2B,CAAA,CAAA;QACzB,OAAA,CAAQ,OAAR,EAAiB,wCAAjB;QACA,KAAgB,IAAC,CAAA,GAAG,CAAC,gBAArB;AAAA,iBAAO,EAAP;;QACA,IAAC,CAAA,YAAD,CAAA;AACA,eAAO;MAJkB,CArF7B;;;MA4FE,YAAc,CAAA,CAAA;AAChB,YAAA,KAAA,EAAA;AACI;;UACE,IAAC,CAAA,GAAD,CAAK,CAAA,CAAA,GAAA;AACX,gBAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAQ;YAAA,KAAA,QAAA;eAAI,CAAE,GAAF,EAAO,IAAP,EAAa,GAAb;cACF,IAAC,CAAA,GAAD,CAAK,IAAC,CAAA,YAAY,CAAC,cAAnB,EAAmC,CAAE,GAAF,EAAO,IAAP,CAAnC;YADF;AAEA,mBAAO;UAHJ,CAAL,EADF;SAKA,cAAA;UAAM;UACJ,WAAG,KAAK,CAAC,UAAU,YAAhB,QAA0B,YAA1B,QAAoC,OAAvC;YACE,OAAA,CAAQ,OAAR,EAAiB,2BAAjB,EAA8C,CAAC,CAAC,KAAK,CAAC,GAAR,CAC5C,KAAK,CAAC,OADsC,CAA9C;YAEA,OAAO,CAAC,IAAR,CAAa,GAAb,EAHF;;UAIA,MAAM,MALR;;AAMA,eAAO;MAbK;;IA9FhB;;;IAGE,WAAC,CAAA,oBAAD,GAAuB,CAAE,gBAAF;;;;gBAjFzB;;;EA6LA,MAAM,CAAC,OAAP,GAAiB,CAAE,WAAF;AA7LjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/db-bases'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ hide }                  = GUY.props\n{ U }                     = require './utilities'\n{ DBay }                  = require 'dbay'\n{ SQL  }                  = DBay\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\n{ get_types }             = require './types'\ntypes                     = get_types()\n{ trash }                 = require 'trash-sync'\n\n\n\n###\n\n8888888888          8888888888          8888888888          8888888888          8888888888          8888888888\n8888888888          8888888888          8888888888          8888888888          8888888888          8888888888\n8888888888          8888888888          8888888888          8888888888          8888888888          8888888888\n8888888888          8888888888          8888888888          8888888888          8888888888          8888888888\n          8888888888          8888888888          8888888888          8888888888          8888888888\n          8888888888          8888888888          8888888888          8888888888          8888888888\n          8888888888          8888888888          8888888888          8888888888          8888888888\n          8888888888          8888888888          8888888888          8888888888          8888888888\n8888888888          8888888888          8888888888          8888888888          8888888888          8888888888\n8888888888          8888888888          8888888888          8888888888          8888888888          8888888888\n8888888888          8888888888          8888888888          8888888888          8888888888          8888888888\n8888888888          8888888888          8888888888          8888888888          8888888888          8888888888\n\n###\n\n#===========================================================================================================\n### TAINT should inherit from common base class together with File_mirror ###\nclass Dbay_autopop\n\n  #---------------------------------------------------------------------------------------------------------\n  # @required_table_names: [ 'fm_datasources', ]\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT use CFG pattern ###\n  constructor: () ->\n    hide @, 'types', get_types()\n    #.......................................................................................................\n    return undefined\n\n\n\n###\n\n8888888888 8888888 888      8888888888   888b     d888 8888888 8888888b.  8888888b.   .d88888b.  8888888b.\n888          888   888      888          8888b   d8888   888   888   Y88b 888   Y88b d88P\" \"Y88b 888   Y88b\n888          888   888      888          88888b.d88888   888   888    888 888    888 888     888 888    888\n8888888      888   888      8888888      888Y88888P888   888   888   d88P 888   d88P 888     888 888   d88P\n888          888   888      888          888 Y888P 888   888   8888888P\"  8888888P\"  888     888 8888888P\"\n888          888   888      888          888  Y8P  888   888   888 T88b   888 T88b   888     888 888 T88b\n888          888   888      888          888   \"   888   888   888  T88b  888  T88b  Y88b. .d88P 888  T88b\n888        8888888 88888888 8888888888   888       888 8888888 888   T88b 888   T88b  \"Y88888P\"  888   T88b\n\n###\n\n#===========================================================================================================\nclass File_mirror extends Dbay_autopop\n\n  #---------------------------------------------------------------------------------------------------------\n  @required_table_names: [ 'fm_datasources', ]\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT use CFG pattern ###\n  constructor: ( db_path, datasource_path, trash_db = false ) ->\n    super()\n    hide @, 'types', get_types()\n    @cfg  = @types.create.fm_constructor_cfg db_path, datasource_path, trash_db\n    @_trash_db_if_necessary()\n    #.......................................................................................................\n    hide @, '_db', new DBay { path: @cfg.db_path, }\n    #.......................................................................................................\n    ### NOTE stuff like the below could go into a DBay utility class ###\n    @_prepare_db_connection()\n    @_create_db_structure_if_necessary()\n    @_populate_db_if_necessary() if new.target is File_mirror\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _trash_db_if_necessary: ->\n    return 0 unless @cfg.trash_db\n    return trash @cfg.db_path\n\n  #---------------------------------------------------------------------------------------------------------\n  _prepare_db_connection: ->\n    # whisper 'Î©___1', \"File_mirror._prepare_db_connection\"\n    # @_db =>\n    #   @_db.create_table_function\n    #     name:         'file_contents_t'\n    #     columns:      [ 'lnr', 'line', 'eol', ]\n    #     parameters:   [ 'filename', ]\n    #     rows: ( filename ) ->\n    #       path  = PATH.resolve process.cwd(), filename\n    #       for { lnr, line, eol, } from GUY.fs.walk_lines_with_positions path\n    #         yield { lnr, line, eol, }\n    #       return null\n    #   return null\n    # #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_required_table_names: -> new Set (\n    ( p.required_table_names ? [] ) for p in WG.props.get_prototype_chain @constructor ).flat()\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure_if_necessary: ->\n    if U.db_has_all_table_names @_db, @constructor.required_table_names\n      whisper 'Î©___2', \"File_mirror::_create_db_structure_if_necessary: re-using DB at #{@cfg.db_path}\"\n    else\n      whisper 'Î©___3', \"File_mirror::_create_db_structure_if_necessary: creating structure of DB at #{@cfg.db_path}\"\n      @_create_db_structure()\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _clear_db : ->\n    ### TAINT belongs to Prompt_file_reader ###\n    ### TAINT use `_required_table_names` ###\n    @_db =>\n      @_db SQL\"drop table if exists prompts;\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    whisper 'Î©___4', \"File_mirror::_create_db_structure\"\n    @_clear_db()\n    @_db =>\n      #.....................................................................................................\n      ### TAINT a more general solution should accommodate more than a single source file ###\n      @_db SQL\"\"\"\n        create table fm_datasources (\n            lnr       integer not null primary key,\n            line      text    not null );\"\"\"\n      #.....................................................................................................\n      ### TAINT auto-generate ###\n      hide @, '_insert_into',\n        fm_datasources:      @_db.create_insert { into: 'fm_datasources',                                  }\n      #.....................................................................................................\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_db_if_necessary: ->\n    whisper 'Î©___5', \"File_mirror::_populate_db_if_necessary\"\n    return 0 unless @cfg.auto_populate_db\n    @_populate_db()\n    return 1\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_db: ->\n    ### TAINT throw error unless @cfg.auto_populate_db ###\n    try\n      @_db =>\n        for { lnr, line, eol, } from GUY.fs.walk_lines_with_positions @cfg.datasource_path\n          @_db @_insert_into.fm_datasources, { lnr, line, }\n        return null\n    catch error\n      if error.code in [ 'ENOENT', 'EACCES', 'EPERM', ]\n        whisper 'Î©___6', \"File_mirror::_populate_db\", U.color.bad \\\n          error.message\n        process.exit 111\n      throw error\n    return null\n\n\n#===========================================================================================================\nmodule.exports = { File_mirror, }\n\n"
  ]
}
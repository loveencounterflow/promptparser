{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/image-registry.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/image-registry'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nFS                        = require 'node:fs'\n{ DBay }                  = require 'dbay'\n{ SQL  }                  = DBay\n{ U }                     = require './utilities'\n\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT this should become part of command line handling with [M.I.X.A.](https://github.com/loveencounterflow/mixa) ###\nset_path = ->\n  process.chdir path if ( path = process.argv[ 2 ] ? null )?\n  R = process.cwd()\n  info \"Ω___1 CWD: #{R}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nbuild_file_db = ->\n  PATH            = require 'node:path'\n  { glob\n    globSync  }   = require 'glob'\n  patterns        = [ '**/*.png', '**/*.jpg', ]\n  cfg             = { dot: true }\n  base_path       = set_path()\n  count           = 0\n  DB              = prepare_db()\n  #.........................................................................................................\n  do =>\n    DB.db ->\n      console.time 'build_file_db'\n      counts    =\n        skipped:  0\n        added:    0\n        deleted:  0\n      rel_paths = globSync patterns, cfg\n      info 'Ω___2', \"found #{rel_paths.length} matching files\"\n      for rel_path in rel_paths\n        count++; whisper count if ( count %% 1000 ) is 0\n        # break if count > 10000 ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n        abs_path  = PATH.resolve base_path, rel_path\n        path_id   = U.id_from_text abs_path\n        #...................................................................................................\n        if DB.known_path_ids.has path_id\n          # help \"Ω___3 skipping path ID #{rpr path_id}\"\n          counts.skipped++\n          ### NOTE we know that in the present run we will not again have to test against the current\n          `path_id`, so we also know we can safely delete it from the pool of known IDs (thereby making it\n          smaller and potentially a tad faster); after having gone through all `path_ids` in the file\n          system, we will then effectively have turned `DB.known_path_ids` into `extraneous_path_ids`, i.e.\n          those that could be deleted from the DB if deemed necessary. ###\n          DB.known_path_ids.delete path_id\n        else\n          ##################################################################################################\n          ##################################################################################################\n          ### TAINT factor this into method ###\n          # warn \"Ω___4 inserting path ID #{rpr path_id}\"\n          counts.added++\n          #.................................................................................................\n          exif = U.exif_from_path abs_path\n          ### TAINT use prepared statement ###\n          try\n            DB.db SQL\"\"\"\n              insert into prompts ( id, prompt ) values ( ?, ? )\n                on conflict ( id ) do nothing;\"\"\", [\n              exif.prompt_id, exif.prompt, ]\n          catch error\n            warn 'Ω___5', \"error: #{error.message}\"\n            warn 'Ω___6', \"error happened with this data: #{rpr exif}\"\n          #.................................................................................................\n          ### TAINT use prepared statement ###\n          try\n            DB.db SQL\"\"\"insert into files ( id, prompt_id, path ) values ( ?, ?, ? );\"\"\", [\n              path_id, exif.prompt_id, abs_path, ]\n          catch error\n            warn 'Ω___7', \"error: #{error.message}\"\n            warn 'Ω___8', \"error happened with this data: #{rpr { path_id, prompt_id: exif.prompt_id, abs_path, }}\"\n          ##################################################################################################\n          ##################################################################################################\n      #.....................................................................................................\n      info \"Ω___9 changes to DB at #{DB.path}: #{rpr counts}\"\n      #.....................................................................................................\n      return null\n    console.timeEnd 'build_file_db'\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nprepare_db = ->\n  ### TAINT use `types`, template ###\n  path                = '/dev/shm/promptparser-image-registry.sqlite'\n  db                  = new DBay { path, }\n  #.........................................................................................................\n  ### TAINT use `U.db_has_all_table_names()` ###\n  get_must_initialize = ( db ) ->\n    tables    = db.first_values SQL\"select name from sqlite_schema where type = 'table' order by name;\"\n    tables    = [ tables..., ]\n    R         = false\n    R       or= 'files'    not in tables\n    R       or= 'prompts'  not in tables\n    return R\n  #.........................................................................................................\n  initialize_db = ( db ) ->\n    db ->\n      db SQL\"drop table if exists files;\"\n      db SQL\"drop table if exists prompts;\"\n      db SQL\"\"\"\n        create table files (\n            id        text not null primary key,\n            prompt_id text not null,\n            path      text not null,\n          foreign key ( prompt_id ) references prompts ( id ) );\"\"\"\n      db SQL\"\"\"\n        create table prompts (\n            id        text not null primary key,\n            prompt    text not null );\"\"\"\n      db SQL\"\"\"insert into prompts ( id, prompt ) values ( ?, ? );\"\"\", [\n        ( U.id_from_text U.nosuchprompt ), U.nosuchprompt, ]\n      db SQL\"\"\"\n        create view files_and_prompts as select\n            f.id      as file_id,\n            p.id      as prompt_id,\n            f.path    as path,\n            p.prompt  as prompt\n          from      prompts as p\n          left join files   as f on ( f.prompt_id = p.id );\"\"\"\n      return null\n    return null\n  #.........................................................................................................\n  if get_must_initialize db\n    warn \"Ω__10 initializing DB at #{path}\"\n    initialize_db db\n  else\n    help \"Ω__11 re-using DB at #{path}\"\n  #.........................................................................................................\n  ### TAINT can we use an API call to get a set? ###\n  known_path_ids = do =>\n    R = new Set()\n    R.add id for id from db.first_values SQL\"select * from files;\"\n    return R\n  #.........................................................................................................\n  return { path, db, known_path_ids, }\n\n\n#===========================================================================================================\nmodule.exports = { build_file_db, }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # await demo_fast_glob()\n  # await demo_node_glob()\n  # await demo_exifr()\n  # await demo_exiftool_vendored()\n  # demo_dbay_with_exifdata()\n  build_file_db()\n"
  ]
}
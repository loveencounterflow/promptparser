{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/utilities.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/file-cache-builder'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nFS                        = require 'node:fs'\nCRYPTO                    = require 'node:crypto'\n{ DBay }                  = require 'dbay'\n{ SQL  }                  = DBay\nExifReader                = require 'exifreader'\n\n\n#===========================================================================================================\nclass Utilities\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @nosuchprompt = \"\"\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  get_db_table_names: ( db ) -> db.all_first_values SQL\"\"\"\n    select name from sqlite_schema where type = 'table' order by name;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  db_has_all_table_names: ( db, must_have_table_names... ) ->\n    table_names = @get_db_table_names db\n    for must_have_table_name from must_have_table_names\n      return false unless must_have_table_name in table_names\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  id_from_text: ( text, length = 16 ) ->\n    hash = CRYPTO.createHash 'sha1'\n    hash.update text\n    return ( hash.digest 'hex' )[ ... length ]\n\n  #---------------------------------------------------------------------------------------------------------\n  normalize_prompt: ( prompt ) ->\n    R = prompt\n    R = R.replace /\\s*\\.\\s*$/, ''\n    R = R.trim()\n    R = R.replace /\\s{2,}/g, ' '\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  exif_from_path: do =>\n    my_buffer = new Buffer.alloc 2 * 1024\n    return ( path ) ->\n      fd          = FS.openSync path\n      FS.readSync fd, my_buffer\n      exif        = ExifReader.load my_buffer\n      if ( data = exif?.UserComment ? null )?\n        R = JSON.parse ( Buffer.from data.value ).toString 'utf-8'\n      else\n        R = { prompt: @nosuchprompt, date: null, }\n      #.....................................................................................................\n      R.prompt    = @normalize_prompt R.prompt\n      R.prompt_id = @id_from_text R.prompt\n      return R\n\n\n#===========================================================================================================\nmodule.exports =\n  Utilities:  Utilities\n  U:          new Utilities()\n\n"
  ]
}
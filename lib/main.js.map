{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n# { misfit\n#   get_base_types }        = require './types'\n# E                         = require './errors'\n#...........................................................................................................\n{ Pipeline\n  $\n  Transformer\n  transforms }            = require 'moonriver'\n\n\n# #===========================================================================================================\n# class Hypedown_parser\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( cfg ) ->\n#     @types        = get_base_types()\n#     @cfg          = Object.freeze @types.create.hd_parser_cfg cfg\n#     @lexer        = new Hypedown_lexer()\n#     # debug '^234^', @lexer\n#     @_build_pipeline()\n#     return undefined\n\n#   #---------------------------------------------------------------------------------------------------------\n#   _build_pipeline: ->\n#     tfs       = new XXX_Hypedown_transforms()\n#     @pipeline = new Pipeline()\n#     #.........................................................................................................\n#     @pipeline.push new XXX_TEMP.$001_prelude()\n#     @pipeline.push new XXX_TEMP.$002_tokenize_lines()\n#     @pipeline.push new XXX_TEMP.$010_prepare_paragraphs()\n#     @pipeline.push new XXX_TEMP.$020_priority_markup()\n#     @pipeline.push new XXX_TEMP.$030_htmlish_tags()\n#     @pipeline.push new XXX_TEMP.$040_stars()\n#     @pipeline.push new XXX_TEMP.$050_hash_headings()\n#     @pipeline.push tfs.$capture_text()\n#     @pipeline.push tfs.$generate_missing_p_tags()\n#     @pipeline.push tfs.$generate_html_nls { mode: 'plain', tid: 'nl', } ### NOTE removes virtual nl, should come late ###\n#     @pipeline.push tfs.$convert_escaped_chrs()\n#     @pipeline.push tfs.$stamp_borders()\n#     # @pipeline.push ( d ) -> urge '^_build_pipeline@5^', rpr d\n#     return null\n\n#   #---------------------------------------------------------------------------------------------------------\n#   send:       ( P... ) -> @pipeline.send P...\n#   run:        ( P... ) -> @pipeline.run  P...\n#   walk:       ( P... ) -> @pipeline.walk P...\n#   stop_walk:  ( P... ) -> @pipeline.stop_walk P...\n#   step:       ( P... ) -> @pipeline.step P...\n\n# f = ->\n#   p = new Pipeline()\n#   p.push ( d, send ) ->\n#     return send d unless d.tid is 'p'\n#     send e for e from md_lexer.walk d.value\n#   p.push $parse_md_stars()\n#   p.send new_token '^æ19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n#   result      = p.run()\n#   result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n#   urge '^08-1^', ( Object.keys d ).sort() for d in result\n#   H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n\n\n#===========================================================================================================\nnew_prompt_lexer = ( mode = 'plain' ) ->\n  lexer   = new Interlex { dotall: false, }\n  #.........................................................................................................\n  do =>\n    mode = 'plain'\n    lexer.add_lexeme { mode, lxid: 'escchr',     jump: null,     pattern:  /\\\\(?<chr>.)/u,           }\n    lexer.add_lexeme { mode, lxid: 'marksleft',  jump: '[marks', pattern:  /\\[/u,                    }\n    lexer.add_lexeme { mode, lxid: 'prompt',     jump: null,     pattern:  /[^\\[\\\\]+/u,              }\n  #.........................................................................................................\n  do =>\n    mode = 'marks'\n    lexer.add_lexeme { mode, lxid: 'marksright', jump: '.]',     pattern:  /\\]/u, reserved: ']',          }\n    lexer.add_lexeme { mode, lxid: 'format',     jump: null,     pattern:  /[swh]/u,                      }\n    lexer.add_lexeme { mode, lxid: 'ws',         jump: null,     pattern:  /\\x20+/u,                      }\n    lexer.add_lexeme { mode, lxid: 'multiplier', jump: null,     pattern:  /x[0-9]{1,2}/u,                }\n    lexer.add_lexeme { mode, lxid: 'promptnr',   jump: null,     pattern:  /p#[0-9]+/u,                   }\n    lexer.add_lexeme { mode, lxid: 'generation', jump: null,     pattern:  /[U01234]/u,                   }\n    lexer.add_lexeme { mode, lxid: 'grade',      jump: null,     pattern:  /[-+A-Fvnr]+/u,                }\n    lexer.add_lexeme { mode, lxid: 'comment',    jump: null,     pattern:  /(?:(?!(?:p#[0-9]|\\])).)+/u,   }\n    lexer.add_reserved_lexeme { mode, lxid: 'forbidden', concat: true, }\n  #.........................................................................................................\n  return lexer\n\n#===========================================================================================================\nclass Prompt_parser extends Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    @_lexer   = new_prompt_lexer { state: 'reset', }\n    @state =\n      counts: { prompts: 0, lexemes: 0, }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  $lex: -> ( source, send ) =>\n    # urge 'Ω___1', rpr source\n    send { $key: 'source', $value: source, }\n    for lexeme from @_lexer.walk source\n      # help 'Ω___2', \"#{lexeme.$key.padEnd 20} #{rpr lexeme.value}\"\n      send lexeme\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $show: -> ( d ) =>\n    urge 'Ω___3', rpr d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_prompt: -> ( d, send ) =>\n    return send d unless d.$key is 'plain:prompt'\n    send stamp d\n    send lets d, ( d ) -> d.value = d.value.trim().replace /\\.$/, ''\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_generation: -> ( d, send ) =>\n    return send d unless d.$key is 'marks:generation'\n    send stamp d\n    send lets d, ( d ) -> d.value = if ( /^\\d$/.test d.value ) then parseInt d.value, 10 else 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_comment: -> ( d, send ) =>\n    return send d unless d.$key is 'marks:comment'\n    send stamp d\n    send lets d, ( d ) -> d.value = d.value.trim()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $stamp_extraneous: -> ( d, send ) =>\n    switch true\n      when d.$key is 'marks:marksleft'  then  send stamp  d\n      when d.$key is 'marks:marksright' then  send stamp  d\n      when d.$key is 'marks:grade'      then  send stamp  d\n      when d.$key is 'marks:ws'         then  send stamp  d\n      else                                    send        d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $count: -> ( d ) =>\n    # urge 'Ω___4', d\n    if d.$key is 'source' then  @state.counts.prompts++\n    else                        @state.counts.lexemes++\n    return null\n\n\n#===========================================================================================================\nclass Wwwww # extends Dbay\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    # super()\n    @_prompt_parser = new Prompt_parser()\n    @_pipeline      = new Pipeline()\n    # @_pipeline.push $show = ( source ) -> whisper 'Ω___5', rpr source\n    @_pipeline.push @_prompt_parser\n    # @_pipeline.push $show = ( d ) -> whisper 'Ω___6', d\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( source ) ->\n    # debug 'Ω___7', rpr source\n    @_pipeline.send source\n    R = @_pipeline.run()\n    info 'Ω___8', GUY.trm.yellow GUY.trm.reverse @_prompt_parser.state\n    return R\n\n\n\n\n#===========================================================================================================\ndo =>\n  prompts = [\n    \"[s324w1 some remark] my prompt\"\n    \"[A++v 212] other prompt\"\n    \"[A++v 212 but no cigar] other prompt\"\n    \"[B 2x3 p#3014] Altbau, Versuchsraum, Institut\"\n    \"[WORDING p#4420]\"\n    \"[UNSAFE p#38]\"\n    \"[+++ + p#41]\"\n    \"[meh p#53]\"\n    \"[UU]\"\n    \"[A+v U1UU]\"\n    \"[A++v 22 but not following directions] \\t foo bar   \"\n    \"[A++v 22 but not following directions p#7765] \\t foo bar.   \"\n    \"\"\n    \"[]\"\n    \"just a prompt\"\n    \"     just a prompt\"\n    \"     [324] a prompt.\"\n    ]\n  parser = new Wwwww()\n  whisper 'Ω___9', '————————————————————————'\n  for prompt in prompts\n    whisper 'Ω__10', '————————————————————————'\n    for d in parser.parse prompt\n      try\n        switch true\n          when d.$key is 'source' then  urge    'Ω__11', GUY.trm.reverse rpr d.$value\n          when d.$stamped         then  whisper 'Ω__12', \"#{d.$key.padEnd 20} #{rpr d.value}\"\n          else                          info    'Ω__13', \"#{d.$key.padEnd 20} #{rpr d.value}\"\n      catch error\n        warn 'Ω__14', error.message\n        whisper 'Ω__15', d\n  return null\n  #.........................................................................................................\n  # p = B.as_pipeline()\n  # debug 'Ω__16', p.run_and_stop()\n  # # T?.eq result, [ [ '*', 'a1', 'a2', 'a3', 'b1', '!b2!', 'b3' ] ]\n  # process.exit 111\n\n# #===========================================================================================================\n# module.exports = {\n#   _TEMP_add_lexemes\n#   Markdown_sx\n#   Standard_sx\n#   Hypedown_lexer }\n"
  ]
}
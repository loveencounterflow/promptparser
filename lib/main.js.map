{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/HYPEDOWN-LEXER'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n# { misfit\n#   get_base_types }        = require './types'\n# E                         = require './errors'\n\n\n\n#===========================================================================================================\n{ Interlex\n  compose  }        = require 'intertext-lexer'\nfirst               = Symbol 'first'\nlast                = Symbol 'last'\n#.........................................................................................................\nnew_prompt_lexer = ( mode = 'plain' ) ->\n  lexer   = new Interlex { dotall: false, }\n  #.........................................................................................................\n  lexer.add_lexeme { mode: 'plain', lxid: 'escchr',     jump: null,     pattern:  /\\\\(?<chr>.)/u,           }\n  lexer.add_lexeme { mode: 'plain', lxid: 'marksleft',  jump: '[marks', pattern:  /\\[/u,                    }\n  lexer.add_lexeme { mode: 'plain', lxid: 'other',      jump: null,     pattern:  /[^\\[\\\\]+/u,              }\n  lexer.add_lexeme { mode: 'marks', lxid: 'marksright', jump: '.]',     pattern:  /\\]/u, reserved: ']',     }\n  lexer.add_lexeme { mode: 'marks', lxid: 'format',     jump: null,     pattern:  /[swh]/u,                 }\n  lexer.add_lexeme { mode: 'marks', lxid: 'ws',         jump: null,     pattern:  /\\x20+/u,              }\n  lexer.add_lexeme { mode: 'marks', lxid: 'multiplier', jump: null,     pattern:  /x[0-9]{1,2}/u,              }\n  lexer.add_lexeme { mode: 'marks', lxid: 'promptnr',   jump: null,     pattern:  /p#[0-9]+/u,              }\n  lexer.add_lexeme { mode: 'marks', lxid: 'generation', jump: null,     pattern:  /[U01234]/u,              }\n  lexer.add_lexeme { mode: 'marks', lxid: 'grade',      jump: null,     pattern:  /[-+A-Fvnr]+/u,              }\n  lexer.add_lexeme { mode: 'marks', lxid: 'comment',    jump: null,     pattern:  /(?:(?!(?:p#[0-9]|\\])).)+/u,              }\n  # lexer.add_lexeme { mode: 'marks', lxid: 'comment',    jump: null,     pattern:  /.+(?!(?:p#[0-9]|\\]))/u,              }\n  # lexer.add_catchall_lexeme { mode: 'marks', lxid: 'comment', concat: true, }\n  lexer.add_reserved_lexeme { mode, lxid: 'forbidden', concat: true, }\n  #.........................................................................................................\n  return lexer\n\n#===========================================================================================================\ndo =>\n  prompts = [\n    \"[s324w1 some remark] my prompt\"\n    \"[A++v 212] other prompt\"\n    \"[A++v 212 but no cigar] other prompt\"\n    \"[B 2x3 p#3014] Altbau, Versuchsraum, Institut\"\n    \"[WORDING p#4420]\"\n    \"[UNSAFE p#38]\"\n    \"[+++ + p#41]\"\n    \"[meh p#53]\"\n    \"[UU]\"\n    \"[A+v U1UU]\"\n    \"[A++v 22 but not following directions] \\t foo bar   \"\n    \"[A++v 22 but not following directions p#7765] \\t foo bar   \"\n    ]\n  for prompt in prompts\n    whisper 'Ω___1', '————————————————————————'\n    urge 'Ω___2', rpr prompt\n    for d from ( new_prompt_lexer() ).walk prompt\n      help 'Ω___3', \"#{d.$key.padEnd 20} #{rpr d.value}\"\n  return null\n\n# #===========================================================================================================\n# module.exports = {\n#   _TEMP_add_lexemes\n#   Markdown_sx\n#   Standard_sx\n#   Hypedown_lexer }\n"
  ]
}
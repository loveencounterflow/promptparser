{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,cAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,GAJF,CAAA,GAI4B,GAAG,CAAC,GAJhC;;EAMA,KAAA,CAAM,OAAN,EAAe,OAAA,CAAQ,uBAAR,CAAf;;EACA,KAAA,CAAM,OAAN,EAAe,OAAA,CAAQ,kBAAR,CAAf;;EApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n\ndebug '立___1', require './production-registry'\ndebug '立___2', require './image-registry'\n\n\n\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _create_db_structure: ->\n  #   super()\n  #   whisper '立___6', \"Prompt_file_reader::_create_db_structure\"\n  #   @_db =>\n  #     @_db SQL\"\"\"\n  #       create table prd_prompts (\n  #           id        text    not null primary key,\n  #           lnr       integer not null,\n  #           prompt    text    not null,\n  #           comment   text        null,\n  #           rejected  boolean not null,\n  #         unique( prompt ) );\"\"\"\n  #     @_db SQL\"\"\"\n  #       create table prd_generations (\n  #           prompt_id text    not null,\n  #           nr        integer not null,\n  #           count     integer not null,\n  #         primary key ( prompt_id, nr ),\n  #         foreign key ( prompt_id ) references prd_prompts ( id ) );\"\"\"\n  #     @_db SQL\"\"\"\n  #       create view prd_counts as select distinct\n  #           prompt_id             as prompt_id,\n  #           count(*)      over w  as generations,\n  #           sum( count )  over w  as images\n  #         from prd_generations as g\n  #         window w as ( partition by prompt_id );\"\"\"\n  #     @_db SQL\"\"\"\n  #       create view prd_densities as select\n  #           c.prompt_id                                                                         as prompt_id,\n  #           c.generations                                                                       as generations,\n  #           c.images                                                                            as images,\n  #           cast( ( ( cast( c.images as real ) / c.generations / 4 ) * 100 + 0.5 ) as integer ) as density\n  #         from prd_generations as g\n  #         left join prd_counts as c on ( g.prompt_id = c.prompt_id );\"\"\"\n  #     @_db SQL\"\"\"\n  #       create view promptstats as select distinct\n  #           d.prompt_id     as prompt_id,\n  #           d.generations   as generations,\n  #           d.images        as images,\n  #           d.density       as density,\n  #           p.lnr           as lnr,\n  #           p.prompt        as prompt\n  #         from prd_prompts    as p\n  #         join prd_densities  as d on ( p.id = d.prompt_id );\"\"\"\n  #     #.....................................................................................................\n  #     ### TAINT auto-generate? ###\n  #     ### NOTE will contain counts for all relations ###\n  #     @_db SQL\"\"\"\n  #       create view rowcounts as\n  #         select            null as name,         null as rowcount where false\n  #         union all select  'prd_prompts',        count(*)          from prd_prompts\n  #         union all select  'prd_generations',    count(*)          from prd_generations\n  #         union all select  'prd_counts',         count(*)          from prd_counts\n  #         union all select  'prd_densities',      count(*)          from prd_densities\n  #         ;\"\"\"\n  #     #.....................................................................................................\n  #     ### TAINT auto-generate ###\n  #     hide @, '_insert_into',\n  #       fm_datasources:   @_db.create_insert { into: 'fm_datasources',                               }\n  #       prd_prompts:      @_db.create_insert { into: 'prd_prompts',  on_conflict: { update: true, }, }\n  #       prd_generations:  @_db.create_insert { into: 'prd_generations',                              }\n  #     return null\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # ### TAINT this should become a standard part of `DBay`; note that as with `@_required_table_names`,\n  # one should walk the prototype chain ###\n  # @insert_into:\n  #   #.......................................................................................................\n  #   fm_datasources: ( d ) ->\n  #     ### TAINT validate? ###\n  #     return @_db.alt @_insert_into.fm_datasources, d\n  #   #.......................................................................................................\n  #   prd_prompts: ( d ) ->\n  #     ### TAINT validate? ###\n  #     return @_db.alt @_insert_into.prd_prompts, lets d, ( d ) ->\n  #       d.rejected = if d.rejected is true then 1 else 0\n  #   #.......................................................................................................\n  #   prd_generations: ( d ) ->\n  #     ### TAINT validate? ###\n  #     return @_db.alt @_insert_into.prd_generations, d\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _populate_db: ->\n  #   whisper '立___7', \"Prompt_file_reader::_populate_db\"\n"
  ]
}
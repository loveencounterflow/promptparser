{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,CAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,WAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,aAAA,EAAA,GAAA,EAAA,MAAA,EAAA,WAAA,EAAA,CAAA,EAAA,KAAA,EAAA,aAAA,EAAA,OAAA,EAAA,KAAA,EAAA,0BAAA,EAAA,IAAA,EAAA,WAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,aAAA,EAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oKAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,cAApB,CAR5B,EALA;;;EAeA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,IAAF,CAAA,GAA4B,GAAG,CAAC,KAAhC,EAnBA;;;EAqBA,CAAA,CAAE,KAAF,CAAA,GAA4B,OAAA,CAAQ,OAAR,CAA5B,EArBA;;;EAuBA,CAAA,CAAE,SAAF,EACE,IADF,EAEE,KAFF,CAAA,GAE2B,KAF3B,EAvBA;;;EA2BA,CAAA,CAAE,QAAF,EACE,MADF,EAEE,OAFF,CAAA,GAE4B,OAAA,CAAQ,iBAAR,CAF5B,EA3BA;;;;;;;EAmCA,CAAA,CAAE,QAAF,EACE,CADF,EAEE,WAFF,EAGE,UAHF,CAAA,GAG4B,OAAA,CAAQ,WAAR,CAH5B;;EAIA,CAAA,CAAE,CAAF,CAAA,GAA4B,OAAA,CAAQ,aAAR,CAA5B;;EACA,CAAA,CAAE,aAAF,CAAA,GAA4B,OAAA,CAAQ,sBAAR,CAA5B;;EACA,CAAA,CAAE,IAAF,CAAA,GAA4B,OAAA,CAAQ,MAAR,CAA5B;;EACA,CAAA,CAAE,GAAF,CAAA,GAA4B,IAA5B;;EACA,IAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,aAAA,GAA4B,MAAA,CAAO,eAAP;;EAC5B,WAAA,GAA4B,MAAA,CAAO,aAAP;;EAC5B,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,SAAR,CAA5B,EA/CA;;;EAmDA,gBAAA,GAAmB,QAAA,CAAE,OAAO,OAAT,CAAA;AACnB,QAAA,YAAA,EAAA,KAAA;;;IAEQ,eAAN,MAAA,aAAA,QAA2B,SAA3B,CAAA;;MAEE,WAAa,CAAA,CAAA;;;;;;;;;YAUb,CAAA,kBAAA,CAAA;QARE,IAAC,CAAA,UAAD,GAAc;UAAE,UAAA,EAAY;QAAd;AACd,eAAO;MAHI,CADjB;;;MAMI,KAAO,CAAA,CAAA,EAAA;;eAEL,IAAC,CAAA,UAAU,CAAC,UAAZ,GAAyB;MAFpB;;MAKP,WAAa,CAAC,CAAE,KAAF,EAAS,KAAT,EAAgB,KAAhB,CAAD,CAAA;+BAZT;QAaF,IAAe,IAAC,CAAA,UAAU,CAAC,UAA3B;AAAA,iBAAO,KAAP;;QACA,IAAC,CAAA,UAAU,CAAC,UAAZ,GAAyB;AACzB,eAAO;UAAE,IAAA,EAAM;QAAR;MAHI;;IAZf,EAFF;;IAmBE,KAAA,GAAc,IAAI,YAAJ,CAAA;IAEX,CAAA,CAAA,CAAA,GAAA,EAAA;MACD,IAAA,GAAO,QAAX;;;MAGI,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,WAAd;QAA4B,IAAA,EAAM,CAAE,QAAA,CAAA,GAAE,CAAF,CAAA;iBAAY,KAAK,CAAC,WAAN,CAAkB,GAAA,CAAlB;QAAZ,CAAF,CAAlC;QAA0E,OAAA,EAAU;MAApF,CAAjB;aACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,QAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;IALC,CAAA;IAOA,CAAA,CAAA,CAAA,GAAA,EAAA;MACD,IAAA,GAAO;MACP,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,YAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU,KAAtD;QAA6D,QAAA,EAAU;MAAvE,CAAjB;MACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,SAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;MACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,QAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;MACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,IAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;MACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,YAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;MACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,UAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;MACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,YAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;MACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,OAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;MACA,KAAK,CAAC,UAAN,CAAiB;QAAE,IAAF;QAAQ,IAAA,EAAM,SAAd;QAA4B,IAAA,EAAM,IAAlC;QAA4C,OAAA,EAAU;MAAtD,CAAjB;aACA,KAAK,CAAC,mBAAN,CAA0B;QAAE,IAAF;QAAQ,IAAA,EAAM,WAAd;QAA2B,MAAA,EAAQ;MAAnC,CAA1B;IAXC,CAAA,IA5BL;;AAyCE,WAAO;EA1CU,EAnDnB;;;EAgGM,gBAAN,MAAA,cAAA,QAA4B,YAA5B,CAAA;;IAGE,WAAa,CAAA,CAAA;WACX,CAAA;MACA,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAiB,SAAA,CAAA,CAAjB;MACA,IAAC,CAAA,MAAD,GAAY,gBAAA,CAAiB;QAAE,KAAA,EAAO;MAAT,CAAjB;MACZ,IAAC,CAAA,KAAD,GACE;QAAA,MAAA,EAAQ;UAAE,OAAA,EAAS,CAAX;UAAc,OAAA,EAAS;QAAvB;MAAR;AACF,aAAO;IANI,CADf;;;IAUE,IAAM,CAAA,CAAA;aAAG,CAAE,MAAF,EAAU,IAAV,CAAA,GAAA;AACX,YAAA,MAAA,EAAA;QAAI,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAA,CAAI,MAAJ,CAAb,CAAb,CAAhB,CAAd;QACA,IAAA,CAAK;UAAE,IAAA,EAAM,QAAR;UAAkB,MAAA,EAAQ,MAA1B;UAAkC,QAAA,EAAU;QAA5C,CAAL;AACA;QAAA,KAAA,aAAA,GAAA;;UAEE,IAAA,CAAK,MAAL;QAFF;AAGA,eAAO;MANA;IAAH,CAVR;;;IAmBE,qBAAuB,CAAA,CAAA;aAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACxB,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAqB,CAAC,CAAC,IAAF,KAAU,kBAA/B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;QACA,IAAA,CAAK,IAAA,CAAK,CAAL,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAC,CAAC,KAAF,GAAa,CAAE,MAAM,CAAC,IAAP,CAAY,CAAC,CAAC,KAAd,CAAF,CAAH,GAAgC,QAAA,CAAS,CAAC,CAAC,KAAX,EAAkB,EAAlB,CAAhC,GAA0D;QAA7E,CAAR,CAAL;AACA,eAAO;MALiB;IAAH,CAnBzB;;;IA2BE,kBAAoB,CAAA,CAAA;aAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACrB,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAqB,CAAC,CAAC,IAAF,KAAU,eAA/B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;QACA,IAAA,CAAK,IAAA,CAAK,CAAL,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAK,CAAC,IAAR,CAAA;QAAnB,CAAR,CAAL;AACA,eAAO;MALc;IAAH,CA3BtB;;;IAmCE,mBAAqB,CAAA,CAAA;AACvB,UAAA,GAAA,EAAA;MAAI,KAAA,GAAQ;MACR,GAAA,GAAQ,KADZ;;AAGI,aAAO,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA,EAAA;;AACX,YAAA,GAAA,EAAA;QAAM,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;SAAN;;QAEM,IAAG,CAAA,KAAK,aAAR;UACE,KAAA,GAAQ;AACR,iBAAO,IAAA,CAAK,CAAL,EAFT;SAFN;;QAMM,IAAG,CAAA,KAAK,WAAR;UAEE,KAAA,GAAQ;YAAE,IAAA,EAAM,QAAR;YAAkB,KAAA,EAAS,KAAK,CAAC,IAAN,CAAW,EAAX,CAA3B;YAA4C;UAA5C;UACR,KAAA,GAAQ,GAAA,GAAM;UACd,IAAA,CAAK,KAAL;AACA,iBAAO,IAAA,CAAK,CAAL,EALT;;QAOA,kCAA2B,CAAE,UAAR,CAAmB,QAAnB,WAArB;;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;SAbN;;;UAeM,MAAO,CAAC,CAAC;;QACT,KAAK,CAAC,IAAN,CAAW,CAAC,CAAC,KAAb;AACA,eAAO,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;MAlBF;IAJY,CAnCvB;;;IA4DE,iBAAmB,CAAA,CAAA;aAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACpB,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAqB,CAAC,CAAC,IAAF,KAAU,QAA/B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;QACA,IAAA,CAAK,IAAA,CAAK,CAAL,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,gBAAF,CAAmB,CAAC,CAAC,KAArB;QAAnB,CAAR,CAAL;AACA,eAAO;MALa;IAAH,CA5DrB;;;IAoEE,wBAA0B,CAAA,CAAA,EAAA;;AAC5B,UAAA,GAAA,EAAA;MACI,KAAA,GAAQ;MACR,GAAA,GAAQ,KAFZ;;AAII,aAAO,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA,EAAA;;AACX,YAAA,GAAA,EAAA;QAAM,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;SAAN;;QAEM,IAAG,CAAA,KAAK,aAAR;UACE,KAAA,GAAQ;AACR,iBAAO,IAAA,CAAK,CAAL,EAFT;SAFN;;QAMM,IAAG,CAAA,KAAK,WAAR;UAEE,KAAA,GAAQ;YAAE,IAAA,EAAM,aAAR;YAAuB,KAAA,EAAO,KAA9B;YAAqC;UAArC;UACR,KAAA,GAAQ,GAAA,GAAM;UACd,IAAA,CAAK,KAAL;AACA,iBAAO,IAAA,CAAK,CAAL,EALT;;QAQA,WAAqB,CAAC,CAAC,UAAU,kBAAjC;;;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;SAdN;;;UAgBM,MAAO,CAAC,CAAC;;QACT,KAAK,CAAC,IAAN,CAAW,CAAC,CAAC,KAAb;AACA,eAAO,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;MAnBF;IALiB,CApE5B;;;IA+FE,qBAAuB,CAAA,CAAA;aAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACxB,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAqB,CAAC,CAAC,IAAF,KAAU,eAA/B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,IAAA,CAAK,CAAL,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAC,CAAC,IAAF,GAAS;QAAlB,CAAR,CAAL;AACA,eAAO,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;MAJiB;IAAH,CA/FzB;;;IAsGE,qBAAuB,CAAA,CAAA;aAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACxB,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAqB,CAAC,CAAC,IAAF,KAAU,eAA/B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,IAAA,CAAK,CAAL,EAAQ,QAAA,CAAE,CAAF,CAAA;UAAS,CAAC,CAAC,IAAF,GAAS;iBAAY,CAAC,CAAC,KAAF,GAAU;QAAxC,CAAR,CAAL;AACA,eAAO,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;MAJiB;IAAH,CAtGzB;;;IA6GE,qBAAuB,CAAA,CAAA;aAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QACxB,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAqB,CAAC,CAAC,IAAF,KAAU,gBAA/B;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;;QACA,IAAA,CAAK,IAAA,CAAK,CAAL,EAAQ,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAC,CAAC,IAAF,GAAS;QAAlB,CAAR,CAAL;AACA,eAAO,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;MAJiB;IAAH,CA7GzB;;;IAoHE,iBAAmB,CAAA,CAAA,EAAA;;AACrB,UAAA,GAAA,EAAA;MACI,SAAA,GAAY;MACZ,GAAA,GAAY,KAFhB;;AAII,aAAO,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACX,YAAA,GAAA,EAAA;;UAAM,qCAAgB,CAAC,CAAC;;QAClB,IAAiB,CAAC,CAAC,QAAnB;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;SADN;;QAGM,IAAG,CAAA,KAAK,aAAR;UACE,SAAA,GAAY,IAAC,CAAA,KAAK,CAAC,MAAM,CAAC,oBAAd,CAAA;AACZ,iBAAO,IAAA,CAAK,CAAL,EAFT;SAHN;;QAOM,IAAG,CAAA,KAAK,WAAR;;UAEE,IAAA,CAAK,IAAC,CAAA,KAAK,CAAC,MAAM,CAAC,kBAAd,CAAiC,SAAjC,CAAL;UACA,SAAA,GAAY;AACZ,iBAAO,IAAA,CAAK,CAAL,EAJT;;QAMA,YAAqB,CAAC,CAAC,UAAU,YAAZ,SAAsB,iBAAtB,SAAqC,aAArC,SAAgD,cAAhD,SAA4D,UAAjF;;AAAA,iBAAO,IAAA,CAAK,CAAL,EAAP;SAbN;;;UAeM,SAAS,CAAC,MAAa;;QACvB,SAAS,CAAE,CAAC,CAAC,IAAJ,CAAT,GAAuB,CAAC,CAAC;AACzB,eAAO,IAAA,CAAK,KAAA,CAAM,CAAN,CAAL;MAlBF;IALU,CApHrB;;;;;;;;IAmJE,iBAAmB,CAAA,CAAA;aAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACpB,gBAAO,IAAP;AAAA,eACO,CAAC,CAAC,IAAF,KAAU,iBADjB;YAC0C,IAAA,CAAK,KAAA,CAAO,CAAP,CAAL;AAAnC;AADP,eAEO,CAAC,CAAC,IAAF,KAAU,kBAFjB;YAE0C,IAAA,CAAK,KAAA,CAAO,CAAP,CAAL;AAAnC;AAFP,eAGO,CAAC,CAAC,IAAF,KAAU,aAHjB;YAG0C,IAAA,CAAK,KAAA,CAAO,CAAP,CAAL;AAAnC;AAHP,eAIO,CAAC,CAAC,IAAF,KAAU,UAJjB;YAI0C,IAAA,CAAK,KAAA,CAAO,CAAP,CAAL;AAAnC;AAJP,eAKO,CAAC,CAAC,IAAF,KAAU,YALjB;YAK0C,IAAA,CAAK,KAAA,CAAO,CAAP,CAAL;AAAnC;AALP,eAMO,CAAC,CAAC,IAAF,KAAU,YANjB;YAM0C,IAAA,CAAK,KAAA,CAAO,CAAP,CAAL;AAAnC;AANP;YAO0C,IAAA,CAAY,CAAZ;AAP1C;AAQA,eAAO;MATa;IAAH,CAnJrB;;;IA+JE,eAAiB,CAAA,CAAA;aAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;QAClB,IAAU,CAAE,CAAA,KAAO,aAAT,CAAA,IAA6B,CAAE,CAAA,KAAO,WAAT,CAA7B,IAAwD,CAAE,CAAI,CAAC,CAAC,QAAR,CAAlE;UAAA,IAAA,CAAK,CAAL,EAAA;;AACA,eAAO;MAFW;IAAH,CA/JnB;;;IAoKE,MAAQ,CAAA,CAAA;aAAG,CAAE,CAAF,CAAA,GAAA,EAAA;;QAET,IAAG,CAAC,CAAC,IAAF,KAAU,QAAb;UAA4B,IAAC,CAAA,KAAK,CAAC,MAAM,CAAC,OAAd,GAA5B;SAAA,MAAA;UAC4B,IAAC,CAAA,KAAK,CAAC,MAAM,CAAC,OAAd,GAD5B;;AAEA,eAAO;MAJE;IAAH;;EAtKV;;EA8KM;;IAAN,MAAA,YAAA,CAAA;;MAME,WAAa,CAAE,IAAF,CAAA;QACX,IAAC,CAAA,GAAD,GAAO,IAAI,IAAJ,CAAS,CAAE,IAAF,CAAT;QACP,IAAC,CAAA,sBAAD,CAAA,EADJ;;QAGI,IAAG,CAAC,CAAC,sBAAF,CAAyB,IAAC,CAAA,GAA1B,EAA+B,IAAC,CAAA,WAAW,CAAC,oBAA5C,CAAH;UACE,IAAA,CAAK,CAAA,qBAAA,CAAA,CAAwB,IAAxB,CAAA,CAAL,EADF;SAAA,MAAA;UAGE,IAAA,CAAK,CAAA,kCAAA,CAAA,CAAqC,IAArC,CAAA,CAAL;UACA,IAAC,CAAA,oBAAD,CAAA,EAJF;SAHJ;;AASI,eAAO;MAVI,CAJf;;;MAiBE,sBAAwB,CAAA,CAAA;QACtB,OAAA,CAAQ,0CAAR;QACA,IAAC,CAAA,GAAD,CAAK,CAAA,CAAA,GAAA;iBACH,IAAC,CAAA,GAAG,CAAC,qBAAL,CACE;YAAA,IAAA,EAAc,iBAAd;YACA,OAAA,EAAc,CAAE,KAAF,EAAS,MAAT,EAAiB,KAAjB,CADd;YAEA,UAAA,EAAc,CAAE,UAAF,CAFd;YAGA,IAAA,EAAM,SAAA,CAAE,QAAF,CAAA;AACd,kBAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;cAAU,IAAA,GAAQ,IAAI,CAAC,OAAL,CAAa,OAAO,CAAC,GAAR,CAAA,CAAb,EAA4B,QAA5B;AACR;cAAA,KAAA,QAAA;iBAAI,CAAE,GAAF,EAAO,IAAP,EAAa,GAAb;gBACF,MAAM,CAAA,CAAE,GAAF,EAAO,IAAP,EAAa,GAAb,CAAA;cADR;AAEA,qBAAO;YAJH;UAHN,CADF;QADG,CAAL,EADJ;;AAYI,eAAO;MAbe,CAjB1B;;;MAiCE,oBAAsB,CAAA,CAAA;QACpB,OAAA,CAAQ,wCAAR,EAAJ;;;;;AAKI,eAAO;MANa;;IAnCxB;;;IAGE,WAAC,CAAA,oBAAD,GAAuB;;;;gBAjRzB;;;EA2TM,qBAAN,MAAA,mBAAA,QAAiC,YAAjC,CAAA;;;IAIE,WAAa,CAAE,gBAAF,CAAA;WACX,CAAM,gBAAN;MACA,IAAC,CAAA,cAAD,GAAkB,IAAI,aAAJ,CAAA;MAClB,IAAC,CAAA,SAAD,GAAkB,IAAI,QAAJ,CAAA,EAFtB;;MAII,IAAC,CAAA,SAAS,CAAC,IAAX,CAAgB,IAAC,CAAA,cAAjB,EAJJ;;AAMI,aAAO;IAPI,CAFf;;;IAYE,KAAO,CAAE,MAAF,CAAA;AACT,UAAA,CAAA;;MACI,IAAC,CAAA,SAAS,CAAC,IAAX,CAAgB,MAAhB;MACA,CAAA,GAAI,IAAC,CAAA,SAAS,CAAC,GAAX,CAAA,EAFR;;MAII,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,OAAR,CAAgB,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,GAAG,CAAC,GAAG,CAAC,IAAR,CAAa,CAAC,CAAC,EAAF,CAAK,CAAC,CAAN,CAAb,CAAb,CAAhB,CAAd,EAJJ;;AAMI,aAAO;IAPF,CAZT;;;IAsBE,oBAAsB,CAAA,CAAA;WAAtB,CAAA,oBACE,CAAA;MACA,OAAA,CAAQ,+CAAR,EADJ;;;;;AAMI,aAAO;IAPa,CAtBxB;;;IAgCE,sBAAwB,CAAA,CAAA;WAAxB,CAAA,sBACE,CAAA;MACA,OAAA,CAAQ,iDAAR;MACA,IAAC,CAAA,GAAG,CAAC,eAAL,CAAqB;QAAA,IAAA,EAAM,QAAN;QAAgB,aAAA,EAAe,IAA/B;QAAqC,OAAA,EAAS,KAA9C;QAAqD,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAA,IAAK;QAAd;MAA3D,CAArB;MACA,IAAC,CAAA,GAAG,CAAC,eAAL,CACE;QAAA,IAAA,EAAgB,OAAhB;QACA,aAAA,EAAgB,IADhB;QAEA,OAAA,EAAgB,KAFhB;QAGA,IAAA,EAAgB,CAAE,MAAF,CAAA,GAAA;iBAAc,IAAI,CAAC,SAAL,CAAe,IAAC,CAAA,KAAD,CAAO,MAAP,CAAf;QAAd;MAHhB,CADF,EAHJ;;AASI,aAAO;IAVe;;EAlC1B,EA3TA;;;EA2WA,0BAAA,GAA6B,QAAA,CAAA,CAAA;AAC7B,QAAA;IAAE,EAAA,GAAK,IAAI,kBAAJ,CAAuB,4CAAvB;IACF,CAAA,QAAA,CAAA,CAAA;AACL,UAAA;aAAI,MAAA,GAAU,EAAE,CAAC,GAAG,CAAC,QAAP,CAAgB,GAAG,CAAA;;;;iEAAA,CAAnB;IADT,CAAA,IADL;;;AAUE,WAAO;EAXoB,EA3W7B;;;EA2XA,MAAM,CAAC,OAAP,GAAiB,CACf,gBADe,EAEf,WAFe,EAGf,kBAHe,EA3XjB;;;EAiYA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA,EAAA;;aAEtC,0BAAA,CAAA;IAFsC,CAAA,IAAxC;;AAjYA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ hide }                  = GUY.props\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n# { misfit\n#   get_base_types }        = require './types'\n# E                         = require './errors'\n#...........................................................................................................\n{ Pipeline\n  $\n  Transformer\n  transforms }            = require 'moonriver'\n{ U }                     = require './utilities'\n{ build_file_db }         = require './file-cache-builder'\n{ DBay }                  = require 'dbay'\n{ SQL  }                  = DBay\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\nstart_of_line             = Symbol 'start_of_line'\nend_of_line               = Symbol 'end_of_line'\n{ get_types }             = require './types'\n\n\n#===========================================================================================================\nnew_prompt_lexer = ( mode = 'plain' ) ->\n  #.........................................................................................................\n  ### TAINT consider to make `enter_marks()` an instance method ###\n  class Prompt_lexer extends Interlex\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ->\n      super { end_of_line, start_of_line, dotall: false, state: 'reset', }\n      @user_state = { marks_done: false, }\n      return undefined\n    #-------------------------------------------------------------------------------------------------------\n    reset: ->\n      # help 'Ω___1', GUY.trm.reverse \"reset\", @user_state\n      @user_state.marks_done = false\n      # return super P...\n    #-------------------------------------------------------------------------------------------------------\n    enter_marks: ({ token, match, lexer, }) =>\n      return null if @user_state.marks_done\n      @user_state.marks_done = true\n      return { jump: '[marks', }\n  #.........................................................................................................\n  lexer       = new Prompt_lexer()\n  #.........................................................................................................\n  do =>\n    mode = 'plain'\n    # lexer.add_lexeme { mode, lxid: 'escchr',     jump: null,     pattern:  /\\\\(?<chr>.)/u,           }\n    # lexer.add_lexeme { mode, lxid: 'marksleft',  jump: '[marks', pattern:  /\\[/u,                    }\n    lexer.add_lexeme { mode, lxid: 'marksleft',  jump: ( ( P... ) -> lexer.enter_marks P... ), pattern:  /\\[/u,                      }\n    lexer.add_lexeme { mode, lxid: 'prompt',     jump: null,     pattern:  /[^\\[]+/u,                     }\n  #.........................................................................................................\n  do =>\n    mode = 'marks'\n    lexer.add_lexeme { mode, lxid: 'marksright', jump: '.]',     pattern:  /\\]/u, reserved: ']',          }\n    lexer.add_lexeme { mode, lxid: 'wording',    jump: null,     pattern:  /WORDING/u,                    }\n    lexer.add_lexeme { mode, lxid: 'format',     jump: null,     pattern:  /[swh]/u,                      }\n    lexer.add_lexeme { mode, lxid: 'ws',         jump: null,     pattern:  /\\x20+/u,                      }\n    lexer.add_lexeme { mode, lxid: 'multiplier', jump: null,     pattern:  /x[0-9]{1,2}/u,                }\n    lexer.add_lexeme { mode, lxid: 'promptnr',   jump: null,     pattern:  /p#[0-9]+/u,                   }\n    lexer.add_lexeme { mode, lxid: 'generation', jump: null,     pattern:  /UNSAFE|[U01234]/u,            }\n    lexer.add_lexeme { mode, lxid: 'grade',      jump: null,     pattern:  /[-+A-Fvnr]+/u,                }\n    lexer.add_lexeme { mode, lxid: 'comment',    jump: null,     pattern:  /(?:(?!(?:p#[0-9]|\\])).)+/u,   }\n    lexer.add_reserved_lexeme { mode, lxid: 'forbidden', concat: true, }\n  #.........................................................................................................\n  return lexer\n\n#===========================================================================================================\nclass Prompt_parser extends Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    hide @, 'types', get_types()\n    @_lexer   = new_prompt_lexer { state: 'reset', }\n    @state =\n      counts: { prompts: 0, lexemes: 0, }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  $lex: -> ( source, send ) =>\n    urge 'Ω___2', GUY.trm.reverse GUY.trm.cyan GUY.trm.bold rpr source\n    send { $key: 'source', $value: source, $stamped: true, }\n    for lexeme from @_lexer.walk source\n      # help 'Ω___3', \"#{lexeme.$key.padEnd 20} #{rpr lexeme.value}\"\n      send lexeme\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_generation: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:generation'\n    send stamp d\n    send lets d, ( d ) -> d.value = if ( /^\\d$/.test d.value ) then parseInt d.value, 10 else 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_comment: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:comment'\n    send stamp d\n    send lets d, ( d ) -> d.value = d.value.trim()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_prompt: ->\n    parts = null\n    lnr   = null\n    #.......................................................................................................\n    return ( d, send ) =>\n      return send d if d.$stamped\n      #.....................................................................................................\n      if d is start_of_line\n        parts = []\n        return send d\n      #.....................................................................................................\n      if d is end_of_line\n        ### TAINT use Datom API ###\n        token = { $key: 'prompt', value: ( parts.join [] ), lnr, }\n        parts = lnr = null\n        send token\n        return send d\n      #.....................................................................................................\n      return send d unless d.$key?.startsWith 'plain:'\n      #.....................................................................................................\n      lnr ?= d.lnr1\n      parts.push d.value\n      return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_prompt: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'prompt'\n    send stamp d\n    send lets d, ( d ) -> d.value = U.normalize_prompt d.value\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_generations: ->\n    ### TAINT code duplication ###\n    parts = null\n    lnr   = null\n    #.......................................................................................................\n    return ( d, send ) =>\n      return send d if d.$stamped\n      #.....................................................................................................\n      if d is start_of_line\n        parts = []\n        return send d\n      #.....................................................................................................\n      if d is end_of_line\n        ### TAINT use Datom API ###\n        token = { $key: 'generations', value: parts, lnr, }\n        parts = lnr = null\n        send token\n        return send d\n      #.....................................................................................................\n      # return send d unless d.$key in [ 'marks:format', 'marks:generation', ]\n      return send d unless d.$key in [ 'marks:generation', ]\n      #.....................................................................................................\n      lnr ?= d.lnr1\n      parts.push d.value\n      return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_comments: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:comment'\n    send lets d, ( d ) -> d.$key = 'comment'\n    return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_rejected: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:wording'\n    send lets d, ( d ) -> d.$key = 'rejected'; d.value = true\n    return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_promptnr: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:promptnr'\n    send lets d, ( d ) -> d.$key = 'promptnr'\n    return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $assemble_records: ->\n    ### TAINT code duplication ###\n    prerecord = null\n    lnr       = null\n    #.......................................................................................................\n    return ( d, send ) =>\n      lnr ?= d.lnr1 ? d.lnr\n      return send d if d.$stamped\n      #.....................................................................................................\n      if d is start_of_line\n        prerecord = @types.create.pp_prerecord_initial()\n        return send d\n      #.....................................................................................................\n      if d is end_of_line\n        ### TAINT use Datom API ###\n        send @types.create.pp_prerecord_final prerecord\n        prerecord = null\n        return send d\n      #.....................................................................................................\n      return send d unless d.$key in [ 'prompt', 'generations', 'comment', 'promptnr', 'rejected', ]\n      #.....................................................................................................\n      prerecord.lnr       ?= lnr\n      prerecord[ d.$key ]  = d.value\n      return send stamp d\n\n  # #---------------------------------------------------------------------------------------------------------\n  # $show: -> ( d ) =>\n  #   urge 'Ω___5', rpr d\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $stamp_extraneous: -> ( d, send ) =>\n    switch true\n      when d.$key is 'marks:marksleft'  then  send stamp  d\n      when d.$key is 'marks:marksright' then  send stamp  d\n      when d.$key is 'marks:grade'      then  send stamp  d\n      when d.$key is 'marks:ws'         then  send stamp  d\n      when d.$key is 'marks:$eof'       then  send stamp  d\n      when d.$key is 'plain:$eof'       then  send stamp  d\n      else                                    send        d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $filter_stamped: -> ( d, send ) =>\n    send d if ( d isnt start_of_line ) and ( d isnt end_of_line ) and ( not d.$stamped )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $count: -> ( d ) =>\n    # urge 'Ω___6', d\n    if d.$key is 'source' then  @state.counts.prompts++\n    else                        @state.counts.lexemes++\n    return null\n\n\n#===========================================================================================================\nclass File_mirror\n\n  #---------------------------------------------------------------------------------------------------------\n  @required_table_names: []\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( path ) ->\n    @_db = new DBay { path, }\n    @_prepare_db_connection()\n    #.......................................................................................................\n    if U.db_has_all_table_names @_db, @constructor.required_table_names\n      help \"Ω___7 re-using DB at #{path}\"\n    else\n      warn \"Ω___8 creating structure of DB at #{path}\"\n      @_create_db_structure()\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _prepare_db_connection: ->\n    whisper \"Ω___9 File_mirror._prepare_db_connection\"\n    @_db =>\n      @_db.create_table_function\n        name:         'file_contents_t'\n        columns:      [ 'lnr', 'line', 'eol', ]\n        parameters:   [ 'filename', ]\n        rows: ( filename ) ->\n          path  = PATH.resolve process.cwd(), filename\n          for { lnr, line, eol, } from GUY.fs.walk_lines_with_positions path\n            yield { lnr, line, eol, }\n          return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    whisper \"Ω__10 File_mirror._create_db_structure\"\n    # @_db =>\n    #   @_db SQL\"drop table if exists ...;\"\n    #   @_db SQL\"\"\"\n    #     create table ...\n    return null\n\n\n#===========================================================================================================\nclass Prompt_file_reader extends File_mirror\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT use CFG pattern, namespacing as in `file_mirror.path`, validation ###\n  constructor: ( file_mirror_path ) ->\n    super file_mirror_path\n    @_prompt_parser = new Prompt_parser()\n    @_pipeline      = new Pipeline()\n    # @_pipeline.push $show = ( source ) -> whisper 'Ω__11', rpr source\n    @_pipeline.push @_prompt_parser\n    # @_pipeline.push $show = ( d ) -> whisper 'Ω__12', d\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( source ) ->\n    # debug 'Ω__13', rpr source\n    @_pipeline.send source\n    R = @_pipeline.run()\n    # info 'Ω__14', GUY.trm.yellow GUY.trm.reverse @_prompt_parser.state\n    info 'Ω__15', GUY.trm.reverse GUY.trm.bold GUY.trm.gold R.at -1\n    # debug 'Ω__16', ( \"#{t.$key}#{rpr t.value}\" for t in R ).join '|'\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    super()\n    whisper \"Ω__17 Prompt_file_reader._create_db_structure\"\n    # @_db =>\n    #   @_db SQL\"drop table if exists ...;\"\n    #   @_db SQL\"\"\"\n    #     create table ...\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _prepare_db_connection: ->\n    super()\n    whisper \"Ω__18 Prompt_file_reader._prepare_db_connection\"\n    @_db.create_function name: 'square', deterministic: true, varargs: false, call: ( n ) -> n ** 2\n    @_db.create_function\n      name:           'parse'\n      deterministic:  true\n      varargs:        false\n      call:           ( prompt ) => JSON.stringify @parse prompt\n    #.......................................................................................................\n    return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_file_as_virtual_table = ->\n  db = new Prompt_file_reader '/dev/shm/demo_file_as_virtual_table.sqlite'\n  do ->\n    result  = db._db.all_rows SQL\"\"\"\n      select\n          *,\n          square( lnr ) as lnr2,\n          parse( line ) as prompt\n        from file_contents_t( './data/short-prompts.md' ) order by lnr;\"\"\"\n    # console.table result\n  #.........................................................................................................\n  return null\n\n\n\n#===========================================================================================================\nmodule.exports = {\n  new_prompt_lexer,\n  File_mirror,\n  Prompt_file_reader, }\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # build_file_db()\n  demo_file_as_virtual_table()\n\n"
  ]
}
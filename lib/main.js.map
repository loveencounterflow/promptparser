{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n# { misfit\n#   get_base_types }        = require './types'\n# E                         = require './errors'\n#...........................................................................................................\n{ Pipeline\n  $\n  Transformer\n  transforms }            = require 'moonriver'\n{ U }                     = require './utilities'\n{ build_file_db }         = require './file-cache-builder'\n\n\n\n#===========================================================================================================\nnew_prompt_lexer = ( mode = 'plain' ) ->\n  lexer   = new Interlex { dotall: false, }\n  #.........................................................................................................\n  do =>\n    mode = 'plain'\n    lexer.add_lexeme { mode, lxid: 'escchr',     jump: null,     pattern:  /\\\\(?<chr>.)/u,           }\n    lexer.add_lexeme { mode, lxid: 'marksleft',  jump: '[marks', pattern:  /\\[/u,                    }\n    lexer.add_lexeme { mode, lxid: 'prompt',     jump: null,     pattern:  /[^\\[\\\\]+/u,              }\n  #.........................................................................................................\n  do =>\n    mode = 'marks'\n    lexer.add_lexeme { mode, lxid: 'marksright', jump: '.]',     pattern:  /\\]/u, reserved: ']',          }\n    lexer.add_lexeme { mode, lxid: 'format',     jump: null,     pattern:  /[swh]/u,                      }\n    lexer.add_lexeme { mode, lxid: 'ws',         jump: null,     pattern:  /\\x20+/u,                      }\n    lexer.add_lexeme { mode, lxid: 'multiplier', jump: null,     pattern:  /x[0-9]{1,2}/u,                }\n    lexer.add_lexeme { mode, lxid: 'promptnr',   jump: null,     pattern:  /p#[0-9]+/u,                   }\n    lexer.add_lexeme { mode, lxid: 'generation', jump: null,     pattern:  /[U01234]/u,                   }\n    lexer.add_lexeme { mode, lxid: 'grade',      jump: null,     pattern:  /[-+A-Fvnr]+/u,                }\n    lexer.add_lexeme { mode, lxid: 'comment',    jump: null,     pattern:  /(?:(?!(?:p#[0-9]|\\])).)+/u,   }\n    lexer.add_reserved_lexeme { mode, lxid: 'forbidden', concat: true, }\n  #.........................................................................................................\n  return lexer\n\n#===========================================================================================================\nclass Prompt_parser extends Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    @_lexer   = new_prompt_lexer { state: 'reset', }\n    @state =\n      counts: { prompts: 0, lexemes: 0, }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  $lex: -> ( source, send ) =>\n    # urge 'Ω___1', rpr source\n    send { $key: 'source', $value: source, }\n    for lexeme from @_lexer.walk source\n      # help 'Ω___2', \"#{lexeme.$key.padEnd 20} #{rpr lexeme.value}\"\n      send lexeme\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $show: -> ( d ) =>\n    urge 'Ω___3', rpr d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_prompt: -> ( d, send ) =>\n    return send d unless d.$key is 'plain:prompt'\n    send stamp d\n    send lets d, ( d ) -> d.value = U.normalize_prompt d.value\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_generation: -> ( d, send ) =>\n    return send d unless d.$key is 'marks:generation'\n    send stamp d\n    send lets d, ( d ) -> d.value = if ( /^\\d$/.test d.value ) then parseInt d.value, 10 else 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_comment: -> ( d, send ) =>\n    return send d unless d.$key is 'marks:comment'\n    send stamp d\n    send lets d, ( d ) -> d.value = d.value.trim()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $stamp_extraneous: -> ( d, send ) =>\n    switch true\n      when d.$key is 'marks:marksleft'  then  send stamp  d\n      when d.$key is 'marks:marksright' then  send stamp  d\n      when d.$key is 'marks:grade'      then  send stamp  d\n      when d.$key is 'marks:ws'         then  send stamp  d\n      else                                    send        d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $count: -> ( d ) =>\n    # urge 'Ω___4', d\n    if d.$key is 'source' then  @state.counts.prompts++\n    else                        @state.counts.lexemes++\n    return null\n\n\n#===========================================================================================================\nclass Prompt_file_reader # extends Dbay\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    # super()\n    @_prompt_parser = new Prompt_parser()\n    @_pipeline      = new Pipeline()\n    # @_pipeline.push $show = ( source ) -> whisper 'Ω___5', rpr source\n    @_pipeline.push @_prompt_parser\n    # @_pipeline.push $show = ( d ) -> whisper 'Ω___6', d\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( source ) ->\n    # debug 'Ω___7', rpr source\n    @_pipeline.send source\n    R = @_pipeline.run()\n    info 'Ω___8', GUY.trm.yellow GUY.trm.reverse @_prompt_parser.state\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_file_as_virtual_table = ->\n  PATH                      = require 'node:path'\n  FS                        = require 'node:fs'\n  { DBay }                  = require 'dbay'\n  { SQL  }                  = DBay\n  #.........................................................................................................\n  path                      = '/dev/shm/demo_file_as_virtual_table.sqlite'\n  db                        = new DBay { path, }\n  #.........................................................................................................\n  initialize_db = ( db ) ->\n    db ->\n      # db SQL\"drop table if exists myfile;\"\n      db.create_virtual_table\n        name:   'file_contents'\n        create: ( filename, P... ) ->\n          urge 'Ω___9', { filename, P, }\n          R =\n            columns: [ 'lnr', 'line', ],\n            rows: ->\n              path  = PATH.resolve process.cwd(), filename\n              ### TAINT read line-by-line ###\n              lines = ( FS.readFileSync path, { encoding: 'utf-8', } ).split '\\n'\n              for line, line_idx in lines\n                yield { lnr: line_idx + 1, line, }\n              return null\n          return R\n      db SQL\"\"\"\n        create virtual table contents_of_readme\n          using file_contents( README.md, any stuff goes here, and more here );\"\"\"\n    return null\n  #.........................................................................................................\n  debug 'Ω__10', U.get_db_table_names db\n  debug 'Ω__11', U.db_has_all_table_names db, 'contents_of_readme'\n  if U.db_has_all_table_names db, 'contents_of_readme'\n    help \"Ω__12 re-using DB at #{path}\"\n  else\n    warn \"Ω__13 initializing DB at #{path}\"\n    initialize_db db\n  #.........................................................................................................\n  result  = db.all_rows SQL\"\"\"select * from contents_of_readme where line != '' order by lnr;\"\"\"\n  console.table result\n  #.........................................................................................................\n  return null\n\n\n\n#===========================================================================================================\nmodule.exports = {\n  new_prompt_lexer,\n  Prompt_file_reader, }\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # build_file_db()\n  demo_file_as_virtual_table()\n"
  ]
}
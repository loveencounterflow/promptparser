{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n# { misfit\n#   get_base_types }        = require './types'\n# E                         = require './errors'\n#...........................................................................................................\n{ Pipeline\n  $\n  Transformer\n  transforms }            = require 'moonriver'\n\n\n# #===========================================================================================================\n# class Hypedown_parser\n\n#   #---------------------------------------------------------------------------------------------------------\n#   constructor: ( cfg ) ->\n#     @types        = get_base_types()\n#     @cfg          = Object.freeze @types.create.hd_parser_cfg cfg\n#     @lexer        = new Hypedown_lexer()\n#     # debug '^234^', @lexer\n#     @_build_pipeline()\n#     return undefined\n\n#   #---------------------------------------------------------------------------------------------------------\n#   _build_pipeline: ->\n#     tfs       = new XXX_Hypedown_transforms()\n#     @pipeline = new Pipeline()\n#     #.........................................................................................................\n#     @pipeline.push new XXX_TEMP.$001_prelude()\n#     @pipeline.push new XXX_TEMP.$002_tokenize_lines()\n#     @pipeline.push new XXX_TEMP.$010_prepare_paragraphs()\n#     @pipeline.push new XXX_TEMP.$020_priority_markup()\n#     @pipeline.push new XXX_TEMP.$030_htmlish_tags()\n#     @pipeline.push new XXX_TEMP.$040_stars()\n#     @pipeline.push new XXX_TEMP.$050_hash_headings()\n#     @pipeline.push tfs.$capture_text()\n#     @pipeline.push tfs.$generate_missing_p_tags()\n#     @pipeline.push tfs.$generate_html_nls { mode: 'plain', tid: 'nl', } ### NOTE removes virtual nl, should come late ###\n#     @pipeline.push tfs.$convert_escaped_chrs()\n#     @pipeline.push tfs.$stamp_borders()\n#     # @pipeline.push ( d ) -> urge '^_build_pipeline@5^', rpr d\n#     return null\n\n#   #---------------------------------------------------------------------------------------------------------\n#   send:       ( P... ) -> @pipeline.send P...\n#   run:        ( P... ) -> @pipeline.run  P...\n#   walk:       ( P... ) -> @pipeline.walk P...\n#   stop_walk:  ( P... ) -> @pipeline.stop_walk P...\n#   step:       ( P... ) -> @pipeline.step P...\n\n\n#===========================================================================================================\nnew_prompt_lexer = ( mode = 'plain' ) ->\n  lexer   = new Interlex { dotall: false, }\n  #.........................................................................................................\n  do =>\n    mode = 'plain'\n    lexer.add_lexeme { mode, lxid: 'escchr',     jump: null,     pattern:  /\\\\(?<chr>.)/u,           }\n    lexer.add_lexeme { mode, lxid: 'marksleft',  jump: '[marks', pattern:  /\\[/u,                    }\n    lexer.add_lexeme { mode, lxid: 'prompt',     jump: null,     pattern:  /[^\\[\\\\]+/u,              }\n  #.........................................................................................................\n  do =>\n    mode = 'marks'\n    lexer.add_lexeme { mode, lxid: 'marksright', jump: '.]',     pattern:  /\\]/u, reserved: ']',          }\n    lexer.add_lexeme { mode, lxid: 'format',     jump: null,     pattern:  /[swh]/u,                      }\n    lexer.add_lexeme { mode, lxid: 'ws',         jump: null,     pattern:  /\\x20+/u,                      }\n    lexer.add_lexeme { mode, lxid: 'multiplier', jump: null,     pattern:  /x[0-9]{1,2}/u,                }\n    lexer.add_lexeme { mode, lxid: 'promptnr',   jump: null,     pattern:  /p#[0-9]+/u,                   }\n    lexer.add_lexeme { mode, lxid: 'generation', jump: null,     pattern:  /[U01234]/u,                   }\n    lexer.add_lexeme { mode, lxid: 'grade',      jump: null,     pattern:  /[-+A-Fvnr]+/u,                }\n    lexer.add_lexeme { mode, lxid: 'comment',    jump: null,     pattern:  /(?:(?!(?:p#[0-9]|\\])).)+/u,   }\n    lexer.add_reserved_lexeme { mode, lxid: 'forbidden', concat: true, }\n  #.........................................................................................................\n  return lexer\n\n#===========================================================================================================\nclass Prompt_parsing_pipeline extends Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  $show: -> ( d ) -> urge 'Ω___1', d\n\n\n#===========================================================================================================\nclass Prompt_parser\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( source ) ->\n    # super()\n    @_lexer   = new_prompt_lexer { state: 'reset', }\n    @_parser  = Prompt_parsing_pipeline.as_pipeline()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( source ) ->\n    for d from @_lexer.walk source\n      help 'Ω___6', \"#{d.$key.padEnd 20} #{rpr d.value}\"\n      @_parser.send d\n    return null\n\n\nf = ->\n      p = new Pipeline()\n      p.push ( d, send ) ->\n        return send d unless d.tid is 'p'\n        send e for e from md_lexer.walk d.value\n      p.push $parse_md_stars()\n      p.send new_token '^æ19^', { start: 0, stop: probe.length, }, 'plain', 'p', null, probe\n      result      = p.run()\n      result_rpr  = ( d.value for d in result when not d.$stamped ).join ''\n      urge '^08-1^', ( Object.keys d ).sort() for d in result\n      H.tabulate \"#{probe} -> #{result_rpr} (#{matcher})\", result # unless result_rpr is matcher\n\n\n\n#===========================================================================================================\ndo =>\n  prompts = [\n    \"[s324w1 some remark] my prompt\"\n    \"[A++v 212] other prompt\"\n    \"[A++v 212 but no cigar] other prompt\"\n    \"[B 2x3 p#3014] Altbau, Versuchsraum, Institut\"\n    \"[WORDING p#4420]\"\n    \"[UNSAFE p#38]\"\n    \"[+++ + p#41]\"\n    \"[meh p#53]\"\n    \"[UU]\"\n    \"[A+v U1UU]\"\n    \"[A++v 22 but not following directions] \\t foo bar   \"\n    \"[A++v 22 but not following directions p#7765] \\t foo bar   \"\n    \"\"\n    \"[]\"\n    \"just a prompt\"\n    \"     just a prompt\"\n    \"     [324] a prompt\"\n    ]\n  parser = new Prompt_parser()\n  for prompt in prompts\n    whisper 'Ω___4', '————————————————————————'\n    urge 'Ω___5', rpr prompt\n    info 'Ω___5', parser.parse prompt\n  return null\n  #.........................................................................................................\n  # p = B.as_pipeline()\n  # debug 'Ω___3', p.run_and_stop()\n  # # T?.eq result, [ [ '*', 'a1', 'a2', 'a3', 'b1', '!b2!', 'b3' ] ]\n  # process.exit 111\n\n# #===========================================================================================================\n# module.exports = {\n#   _TEMP_add_lexemes\n#   Markdown_sx\n#   Standard_sx\n#   Hypedown_lexer }\n"
  ]
}
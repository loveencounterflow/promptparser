{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/promptlexer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'HYPEDOWN/HYPEDOWN-LEXER'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n{ misfit\n  get_base_types }        = require './types'\nE                         = require './errors'\n\n\n#===========================================================================================================\nclass Standard_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  @mode: 'plain'\n\n  #---------------------------------------------------------------------------------------------------------\n  # @lx_backslash_escape:  { tid: 'escchr', jump: null, pattern: /\\\\(?<chr>.)/u, reserved: '\\\\', }\n\n\n\n#===========================================================================================================\nclass Markdown_sx extends Syntax\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super { cfg..., }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_variable_codespan: ( cfg ) ->\n    backtick_count  = null\n    #.......................................................................................................\n    entry_handler = ({ token, match, lexer, }) =>\n      backtick_count = token.value.length\n      return '[cspan'\n    #.......................................................................................................\n    exit_handler = ({ token, match, lexer, }) ->\n      # debug '^534^', token\n      # debug '^534^', match\n      # debug '^534^', token.value.length, backtick_count\n      if token.value.length is backtick_count\n        backtick_count = null\n        return '.]'\n      ### TAINT setting `token.mk` should not have to be done manually ###\n      token = lets token, ( token ) -> token.tid = 'text'; token.mk = \"#{token.mode}:text\"\n      return { token, }\n    #.......................................................................................................\n    # info '^3531^', @cfg\n    return [\n      { mode: 'plain',    tid: 'start',  jump: entry_handler,  pattern:  /(?<!`)`+(?!`)/u, reserved: '`', }\n      { mode: 'cspan',    tid: 'stop',   jump: exit_handler,   pattern:  /(?<!`)`+(?!`)/u, reserved: '`', }\n      ( new_nl_descriptor     'cspan' )\n      ( new_escchr_descriptor 'cspan' )\n      ### NOTE this should be produced with `lexer.add_catchall_lexeme()` ###\n      # { mode: 'cspan', tid: 'text',      jump: null,           pattern:  /(?:\\\\`|[^`])+/u,  }\n      { mode: 'cspan', tid: 'text',      jump: null,           pattern:  /[^`\\\\]+/u,  }\n      ]\n\n  #---------------------------------------------------------------------------------------------------------\n  # @lx_nl:  /$/u\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_star1:  { tid: 'star1', pattern: /(?<!\\*)\\*(?!\\*)/u,      reserved: '*', }\n  @lx_star2:  { tid: 'star2', pattern: /(?<!\\*)\\*\\*(?!\\*)/u,    reserved: '*', }\n  @lx_star3:  { tid: 'star3', pattern: /(?<!\\*)\\*\\*\\*(?!\\*)/u,  reserved: '*', }\n\n  #---------------------------------------------------------------------------------------------------------\n  @lx_hashes:  /^(?<text>#{1,6})($|\\s+)/u\n\n\n#===========================================================================================================\nclass Hypedown_lexer extends Interlex\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super { linewise: true, border_tokens: true, }\n    _TEMP_add_lexemes @\n    standard_sx       = new Standard_sx()\n    markdown_sx       = new Markdown_sx()\n    lexemes_lst       = []\n    standard_sx.add_lexemes lexemes_lst\n    markdown_sx.add_lexemes lexemes_lst\n    @add_lexeme lexeme for lexeme in lexemes_lst\n    # @add_catchall_lexeme { mode: 'standard', }\n    # @add_reserved_lexeme { mode: 'standard', }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  step: ( P... ) ->\n    return GUY.lft.lets ( super P... ), ( tokens ) ->\n      delete token.source for token in tokens\n      return null\n    return R\n\n#-----------------------------------------------------------------------------------------------------------\nnew_escchr_descriptor = ( mode ) ->\n  create = ( token ) ->\n    token.data = { chr: '\\n', } unless ( token.data?.chr )?\n    return token\n  return { mode, tid: 'escchr', pattern: /\\\\(?<chr>.|$)/u, reserved: '\\\\', create, }\n\n#-----------------------------------------------------------------------------------------------------------\nnew_nl_descriptor = ( mode ) ->\n  ### TAINT consider to force value by setting it in descriptor (needs interlex update) ###\n  create = ( token ) ->\n    token.value = '\\n'\n    return token\n  return { mode, tid: 'nl', pattern: /$/u, create, }\n\n#-----------------------------------------------------------------------------------------------------------\n_TEMP_add_lexemes = ( lexer ) ->\n  # lexer.add_lexeme { mode, tid: 'eol',      pattern: ( /$/u  ), }\n  #.........................................................................................................\n  do =>\n    mode = 'plain'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode,  tid: 'amp',       jump: '[xncr',    pattern: /&(?=[^\\s\\\\]+;)/, reserved: '&', } # only match if ahead of (no ws, no bslash) + semicolon\n    lexer.add_lexeme { mode,  tid: 'c_s',       jump: '[tag]',    pattern: '/',              reserved: '/', }\n    lexer.add_lexeme { mode,  tid: 'c_lsr',     jump: '[tag]',    pattern: '</>',            reserved: '<', }\n    lexer.add_lexeme { mode,  tid: 'c_ls',      jump: '[tag',     pattern: /<\\/(?!>)/,       reserved: '<', }\n    lexer.add_lexeme { mode,  tid: 'ltbang',    jump: '[comment', pattern: '<!--',           reserved: '<', }\n    lexer.add_lexeme { mode,  tid: 'lt',        jump: '[tag',     pattern: '<',              reserved: '<', }\n    lexer.add_lexeme { mode,  tid: 'ws',        jump: null,       pattern: /\\s+/u, }\n    lexer.add_catchall_lexeme { mode, tid: 'other', concat: true, }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', concat: true, }\n  #.........................................................................................................\n  do =>\n    mode = 'tag'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    # lexer.add_lexeme { mode,  tid: 'tagtext',   jump: null,       pattern: ( /[^\\/>]+/u ), }\n    lexer.add_lexeme { mode,  tid: 'dq',        jump: 'tag:dq[',  pattern: '\"',       reserved: '\"' }\n    lexer.add_lexeme { mode,  tid: 'sq',        jump: 'tag:sq[',  pattern: \"'\",       reserved: \"'\" }\n    lexer.add_lexeme { mode,  tid: 'slashgt',   jump: '.]',       pattern: '/>',      reserved: [ '>', '/', ] }\n    lexer.add_lexeme { mode,  tid: 'slash',     jump: '.]',       pattern: '/',       reserved: '/', }\n    lexer.add_lexeme { mode,  tid: 'gt',        jump: '.]',       pattern: '>',       reserved: '>', }\n    lexer.add_catchall_lexeme { mode, tid: 'text', concat: true, }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', concat: true, }\n  #.........................................................................................................\n  do =>\n    mode = 'xncr'\n    # lexer.add_lexeme new_escchr_descriptor  mode\n    # lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode,  tid: 'csg',       jump: null,     pattern: /(?<=&)[^\\s;#\\\\]+(?=#)/u, } # character set sigil (non-standard)\n    lexer.add_lexeme { mode,  tid: 'name',      jump: null,     pattern: /(?<=&)[^\\s;#\\\\]+(?=;)/u, } # name of named entity\n    lexer.add_lexeme { mode,  tid: 'dec',       jump: null,     pattern: /#(?<nr>[0-9]+)(?=;)/u, }\n    lexer.add_lexeme { mode,  tid: 'hex',       jump: null,     pattern: /#(?:x|X)(?<nr>[0-9a-fA-F]+)(?=;)/u, }\n    lexer.add_lexeme { mode,  tid: 'sc',        jump: '.]',      pattern: /;/u, }\n    lexer.add_lexeme { mode,  tid: '$error',    jump: '.]',      pattern: /.|$/u, }\n  #.........................................................................................................\n  do =>\n    mode = 'tag:dq'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode,  tid: 'dq',        jump: '].',        pattern: '\"',       reserved: '\"', }\n    lexer.add_catchall_lexeme { mode, tid: 'text', concat: true, }\n  #.........................................................................................................\n  do =>\n    mode = 'tag:sq'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode,  tid: 'sq',        jump: '].',        pattern: \"'\",       reserved: \"'\", }\n    lexer.add_catchall_lexeme { mode, tid: 'text', concat: true, }\n  #.........................................................................................................\n  do =>\n    mode = 'comment'\n    lexer.add_lexeme new_escchr_descriptor  mode\n    lexer.add_lexeme new_nl_descriptor      mode\n    lexer.add_lexeme { mode, tid: 'eoc',       jump: '.]',         pattern:  '-->',    reserved: '--',  }\n    lexer.add_catchall_lexeme { mode, tid: 'text', concat: true, }\n    lexer.add_reserved_lexeme { mode, tid: 'forbidden', concat: true, }\n  return null\n\n\n#===========================================================================================================\nmodule.exports = {\n  _TEMP_add_lexemes\n  Markdown_sx\n  Standard_sx\n  Hypedown_lexer }\n"
  ]
}
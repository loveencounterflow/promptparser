{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,oBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,GAJF,CAAA,GAI4B,GAAG,CAAC,GAJhC;;EAKA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B,EAlBA;;;EAoBA,KAAA,GAA4B,KApB5B;;;EAuBA,SAAA,GAAY,QAAA,CAAA,CAAA;AACZ,QAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA;IAAE,IAAgB,aAAhB;AAAA,aAAO,MAAP;;IACA,KAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,MAHF,CAAA,GAG4B,KAH5B,EAFF;;IAOE,KAAK,CAAC,OAAN,CACE;MAAA,aAAA,EAAkB,kBAAlB;;MAEA,oBAAA,EACE;QAAA,MAAA,EACE;UAAA,IAAA,EAAc,MAAd;UACA,GAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,aAAd,CAA4B,CAA5B;UAAT,CADd;UACqD,6CACrD,QAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,IAAd,CAA4B,CAA5B;UAAT,CAFd;UAEqD,6CACrD,MAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,IAAd,CAA4B,CAA5B;UAAT,CAHd;UAGqD,6CACrD,WAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,IAAd,CAA4B,CAA5B;UAAT,CAJd;UAIqD,6CACrD,OAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,IAAd,CAA4B,CAA5B;UAAT,CALd;UAKqD,6CACrD,QAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,OAAd,CAA4B,CAA5B;UAAT;QANd,CADF;QAOuD,6CACvD,QAAA,EACE;UAAA,IAAA,EAAc,WAAd;UACA,GAAA,EAAc,IADd;UAEA,QAAA,EAAc,IAFd;UAGA,MAAA,EAAc,IAHd;UAIA,WAAA,EAAc,IAJd;UAKA,OAAA,EAAc,IALd;UAMA,QAAA,EAAc;QANd;MATF,CAHF;;MAoBA,kBAAA,EACE;QAAA,MAAA,EACE;UAAA,IAAA,EAAc,MAAd;UACA,GAAA,EAAc,kBADd;UAEA,QAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,IAAd,CAAmB,CAAnB;UAAT,CAFd;UAE4C,6CAC5C,MAAA,EAAc,MAHd;UAIA,WAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV,CAAF,CAAA,IAAoB,CAAE,CAAC,CAAC,KAAF,CAAQ,CAAE,CAAF,CAAA,GAAA;qBAAS,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAd;YAAT,CAAR,CAAF;UAA7B,CAJd;UAIgF,6CAChF,OAAA,EAAc,QAAA,CAAE,CAAF,CAAA;mBAAS,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAC,IAAd,CAAmB,CAAnB;UAAT,CALd;UAK4C,6CAC5C,QAAA,EAAc;QANd,CADF;QAQA,MAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;UACN,KAAgB,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAhB;AAAA,mBAAO,EAAP;;AACA,iBAAO;QAFD;MARR;IArBF,CADF,EAPF;;AAyCE,WAAO;EA1CG,EAvBZ;;;EAqEA,MAAM,CAAC,OAAP,GAAiB,CAAE,SAAF;AArEjB",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/types'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\n#...........................................................................................................\ntypes                     = null\n\n#===========================================================================================================\nget_types = ->\n  return types if types?\n  types                     = new Intertype\n  { isa\n    type_of\n    validate\n    create                } = types\n  #.........................................................................................................\n  types.declare\n    pp_linenumber:    'positive.integer'\n    #.......................................................................................................\n    pp_prerecord_initial:\n      fields:\n        $key:         'text'\n        lnr:          ( x ) -> @isa.optional.pp_linenumber x ### TAINT workaround due to missing feature ###\n        promptnr:     ( x ) -> @isa.optional.text          x ### TAINT workaround due to missing feature ###\n        prompt:       ( x ) -> @isa.optional.text          x ### TAINT workaround due to missing feature ###\n        generations:  ( x ) -> @isa.optional.list          x ### TAINT workaround due to missing feature ###\n        comment:      ( x ) -> @isa.optional.text          x ### TAINT workaround due to missing feature ###\n        rejected:     ( x ) -> @isa.optional.boolean       x ### TAINT workaround due to missing feature ###\n      template:\n        $key:         'prerecord'\n        lnr:          null\n        promptnr:     null\n        prompt:       null\n        generations:  null\n        comment:      null\n        rejected:     false\n    #.......................................................................................................\n    pp_prerecord_final:\n      fields:\n        $key:         'text'\n        lnr:          'positive.integer'\n        promptnr:     ( x ) -> @isa.optional.text x ### TAINT workaround due to missing feature ###\n        prompt:       'text'\n        generations:  ( x ) -> ( @isa.list x ) and ( x.every ( e ) => @isa.cardinal e ) ### TAINT workaround due to missing feature ###\n        comment:      ( x ) -> @isa.optional.text x ### TAINT workaround due to missing feature ###\n        rejected:     'boolean'\n      create: ( x ) ->\n        return x unless @isa.object x\n        return x\n  #.........................................................................................................\n  return types\n\n\n#===========================================================================================================\nmodule.exports = { get_types, }\n"
  ]
}
{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/types'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\n#...........................................................................................................\ntypes                     = null\n\n#===========================================================================================================\nget_types = ->\n  return types if types?\n  types                     = new Intertype\n  { isa\n    type_of\n    validate\n    create                } = types\n  #.........................................................................................................\n  types.declare\n    #.......................................................................................................\n    cardinal_or_infinity: ( x ) -> ( x is Infinity ) or ( @isa.cardinal x )\n    #.......................................................................................................\n    pp_linenumber:    'positive.integer'\n    pp_content_id:    ( x ) -> ( @isa.text x ) and ( /^[0-9a-f]{16}$/.test x )\n    #.......................................................................................................\n    pp_prerecord_initial:\n      fields:\n        $key:         'text'\n        lnr:          ( x ) -> @isa.optional.pp_linenumber  x ### TAINT workaround due to missing feature ###\n        promptnr:     ( x ) -> @isa.optional.text           x ### TAINT workaround due to missing feature ###\n        prompt:       ( x ) -> @isa.optional.text           x ### TAINT workaround due to missing feature ###\n        prompt_id:    ( x ) -> @isa.optional.pp_content_id  x ### TAINT workaround due to missing feature ###\n        generations:  ( x ) -> @isa.optional.list           x ### TAINT workaround due to missing feature ###\n        comment:      ( x ) -> @isa.optional.text           x ### TAINT workaround due to missing feature ###\n        rejected:     ( x ) -> @isa.optional.boolean        x ### TAINT workaround due to missing feature ###\n      template:\n        $key:         'prerecord'\n        lnr:          null\n        promptnr:     null\n        prompt:       null\n        prompt_id:    null\n        generations:  null\n        comment:      null\n        rejected:     false\n    #.......................................................................................................\n    pp_prerecord_final:\n      fields:\n        $key:         'text'\n        lnr:          'positive.integer'\n        promptnr:     ( x ) -> @isa.optional.text x ### TAINT workaround due to missing feature ###\n        prompt:       'text'\n        prompt_id:    'pp_content_id'\n        generations:  ( x ) -> ( @isa.list x ) and ( x.every ( e ) => @isa.cardinal e ) ### TAINT workaround due to missing feature ###\n        comment:      ( x ) -> @isa.optional.text x ### TAINT workaround due to missing feature ###\n        rejected:     'boolean'\n      create: ( x ) ->\n        return x unless @isa.object x\n        return x\n    #.......................................................................................................\n    list_or_iterator:  ( x ) ->\n      return true if @isa.list      x\n      return true if @isa.generator x\n      return false\n    #.......................................................................................................\n    pfr_constructor_cfg:\n      test:   'object'\n      fields:\n        cmd:                  'nonempty.text'\n        flags:                'object'\n        lines:                'list_or_iterator'\n      create: ( cfg ) ->\n        R = { @declarations.pfr_constructor_cfg.template..., cfg..., }\n        return R\n    #.......................................................................................................\n    prompt_db_cfg:\n      test:   'object'\n      fields:\n        cmd:                  'nonempty.text'\n        flags:                'object'\n        # lines:                'list_or_iterator'\n      template:\n        cmd:                  null\n        flags:                null\n        # lines:                null\n      create: ( cfg ) ->\n        debug 'Ω___1', cfg\n        R = { @declarations.prompt_db_cfg.template..., cfg..., }\n        return R\n    #.......................................................................................................\n    cli_max_count:\n      test:                 'cardinal_or_infinity'\n      template:             +Infinity\n      create:               ( x ) ->\n        return @declarations.cli_max_count.template unless x?\n        # return x unless /^\\+?\\d+$/.test x\n        Math.round parseFloat x\n    #.......................................................................................................\n    normalfloat:            ( x ) -> ( @isa.float x ) and 0 <= x <= 1\n    #.......................................................................................................\n    cli_sample:\n      test:                 'normalfloat'\n      template:             1\n      create: ( x ) ->\n        switch true\n          when not x?\n            return @declarations.cli_sample.template\n          when x.endsWith '%'\n            return ( ( parseFloat x ) / 100 )\n          when ( match = x.match /^(?<numerator>[0-9.]+)\\/(?<denominator>[0-9.]+)$/ )?\n            return ( ( parseFloat match.groups.numerator ) / parseFloat match.groups.denominator )\n        return parseFloat x\n    #.......................................................................................................\n    cli_seed:\n      test:                 'float'\n      template:             null\n      create: ( x ) ->\n        return @declarations.cli_sample.template unless x?\n        return parseFloat x\n    #.......................................................................................................\n    cli_match:\n      test:                 ( x ) -> @isa.optional.regex x ### TAINT workaround due to missing feature ###\n      template:             null\n      create: ( x ) ->\n        return null unless x?\n        return new RegExp x\n    #.......................................................................................................\n    cli_pre_match:\n      test:                 'regex'\n      template:             /^\\[.*?\\]\\s*\\S+/\n      create: ( x ) ->\n        debug 'Ω___2', ( rpr x ), rpr @declarations.cli_pre_match.template\n        return @declarations.cli_pre_match.template unless x?\n        return new RegExp x\n    #.......................................................................................................\n    cli_trash_db:\n      test:                 'boolean'\n      template:             false\n      create: ( x ) ->\n        return @declarations.cli_trash_db.template  unless x?\n        return true                                 if x is 'true'\n        return false                                if x is 'false'\n        return x\n    #.......................................................................................................\n    cli_db:\n      test:                 'nonempty.text'\n      template:             '/dev/shm/promptparser.sqlite'\n      create: ( x ) -> x ? @declarations.cli_db.template\n    #.......................................................................................................\n    cli_prompts:\n      test:                 'nonempty.text'\n      template:             null\n      create: ( x ) -> x\n\n  #.........................................................................................................\n  return types\n\n\n#===========================================================================================================\nmodule.exports = { get_types, }\n"
  ]
}
{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/production-registry.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/production-registry'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ hide }                  = GUY.props\n#...........................................................................................................\n{ DATOM }                 = require 'datom'\nWG                        = require 'webguy'\n#...........................................................................................................\n{ new_datom\n  lets\n  stamp }                = DATOM\n#...........................................................................................................\n{ Interlex\n  Syntax\n  compose  }              = require 'intertext-lexer'\n#...........................................................................................................\n# { misfit\n#   get_base_types }        = require './types'\n# E                         = require './errors'\n#...........................................................................................................\n{ Pipeline\n  $\n  Transformer\n  transforms }            = require 'moonriver'\n{ U }                     = require './utilities'\n{ DBay }                  = require 'dbay'\n{ SQL  }                  = DBay\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\nstart_of_line             = Symbol 'start_of_line'\nend_of_line               = Symbol 'end_of_line'\n{ get_types }             = require './types'\ntypes                     = get_types()\n{ trash }                 = require 'trash-sync'\n{ File_mirror }           = require './db-bases'\n\n\n###\n\n8888888b.  8888888b.   .d88888b.  888b     d888 8888888b. 88888888888   888      8888888888 Y88b   d88P 8888888888 8888888b.\n888   Y88b 888   Y88b d88P\" \"Y88b 8888b   d8888 888   Y88b    888       888      888         Y88b d88P  888        888   Y88b\n888    888 888    888 888     888 88888b.d88888 888    888    888       888      888          Y88o88P   888        888    888\n888   d88P 888   d88P 888     888 888Y88888P888 888   d88P    888       888      8888888       Y888P    8888888    888   d88P\n8888888P\"  8888888P\"  888     888 888 Y888P 888 8888888P\"     888       888      888           d888b    888        8888888P\"\n888        888 T88b   888     888 888  Y8P  888 888           888       888      888          d88888b   888        888 T88b\n888        888  T88b  Y88b. .d88P 888   \"   888 888           888       888      888         d88P Y88b  888        888  T88b\n888        888   T88b  \"Y88888P\"  888       888 888           888       88888888 8888888888 d88P   Y88b 8888888888 888   T88b\n\n###\n\n\n\n#===========================================================================================================\nnew_prompt_lexer = ( mode = 'plain' ) ->\n  #.........................................................................................................\n  ### TAINT consider to make `enter_marks()` an instance method ###\n  class Prompt_lexer extends Interlex\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ->\n      super { end_of_line, start_of_line, dotall: false, state: 'reset', }\n      @user_state = { marks_done: false, }\n      return undefined\n    #-------------------------------------------------------------------------------------------------------\n    reset: ->\n      # help 'Ω___1', GUY.trm.reverse \"reset\", @user_state\n      @user_state.marks_done = false\n      # return super P...\n    #-------------------------------------------------------------------------------------------------------\n    enter_marks: ({ token, match, lexer, }) =>\n      return null if @user_state.marks_done\n      @user_state.marks_done = true\n      return { jump: '[marks', }\n  #.........................................................................................................\n  lexer       = new Prompt_lexer()\n  #.........................................................................................................\n  do =>\n    mode = 'plain'\n    # lexer.add_lexeme { mode, lxid: 'escchr',     jump: null,     pattern:  /\\\\(?<chr>.)/u,           }\n    # lexer.add_lexeme { mode, lxid: 'marksleft',  jump: '[marks', pattern:  /\\[/u,                    }\n    lexer.add_lexeme { mode, lxid: 'marksleft',  jump: ( ( P... ) -> lexer.enter_marks P... ), pattern:  /\\[/u,                      }\n    lexer.add_lexeme { mode, lxid: 'prompt',     jump: null,     pattern:  /[^\\[]+/u,                     }\n  #.........................................................................................................\n  do =>\n    mode = 'marks'\n    lexer.add_lexeme { mode, lxid: 'marksright', jump: '.]',     pattern:  /\\]/u, reserved: ']',          }\n    lexer.add_lexeme { mode, lxid: 'wording',    jump: null,     pattern:  /WORDING/u,                    }\n    lexer.add_lexeme { mode, lxid: 'format',     jump: null,     pattern:  /[swh]/u,                      }\n    lexer.add_lexeme { mode, lxid: 'ws',         jump: null,     pattern:  /\\x20+/u,                      }\n    lexer.add_lexeme { mode, lxid: 'multiplier', jump: null,     pattern:  /x[0-9]{1,2}/u,                }\n    lexer.add_lexeme { mode, lxid: 'promptnr',   jump: null,     pattern:  /p#[0-9]+/u,                   }\n    lexer.add_lexeme { mode, lxid: 'generation', jump: null,     pattern:  /UNSAFE|[U01234]/u,            }\n    lexer.add_lexeme { mode, lxid: 'grade',      jump: null,     pattern:  /[-+A-Fvnr]+/u,                }\n    lexer.add_lexeme { mode, lxid: 'comment',    jump: null,     pattern:  /(?:(?!(?:p#[0-9]|\\])).)+/u,   }\n    lexer.add_reserved_lexeme { mode, lxid: 'forbidden', concat: true, }\n  #.........................................................................................................\n  return lexer\n\n###\n\n8888888b.  8888888b.   .d88888b.  888b     d888 8888888b.  88888888888  8888888b.      d8888  8888888b.   .d8888b.  8888888888 8888888b.\n888   Y88b 888   Y88b d88P\" \"Y88b 8888b   d8888 888   Y88b     888      888   Y88b    d88888  888   Y88b d88P  Y88b 888        888   Y88b\n888    888 888    888 888     888 88888b.d88888 888    888     888      888    888   d88P888  888    888 Y88b.      888        888    888\n888   d88P 888   d88P 888     888 888Y88888P888 888   d88P     888      888   d88P  d88P 888  888   d88P  \"Y888b.   8888888    888   d88P\n8888888P\"  8888888P\"  888     888 888 Y888P 888 8888888P\"      888      8888888P\"  d88P  888  8888888P\"      \"Y88b. 888        8888888P\"\n888        888 T88b   888     888 888  Y8P  888 888            888      888       d88P   888  888 T88b         \"888 888        888 T88b\n888        888  T88b  Y88b. .d88P 888   \"   888 888            888      888      d8888888888  888  T88b  Y88b  d88P 888        888  T88b\n888        888   T88b  \"Y88888P\"  888       888 888            888      888     d88P     888  888   T88b  \"Y8888P\"  8888888888 888   T88b\n\n###\n\n\n#===========================================================================================================\nclass Prompt_parser extends Transformer\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT use CFG pattern ###\n  constructor: ( match = null ) ->\n    super()\n    hide @, 'types', get_types()\n    @_lexer   = new_prompt_lexer { state: 'reset', }\n    @cfg      = { match, }\n    @state    =\n      counts: { prompts: 0, lexemes: 0, non_matches: 0, }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _cast_token: ( lnr, token ) ->\n    unless @types.isa.symbol token\n      token = lets token, ( token ) -> token.lnr1 = token.lnr2 = lnr\n    return token\n\n  #---------------------------------------------------------------------------------------------------------\n  $lex: -> ( row, send ) =>\n    # urge 'Ω___2', GUY.trm.reverse GUY.trm.cyan GUY.trm.bold rpr row\n    send { $key: 'row', $value: row, $stamped: true, }\n    send @_cast_token row.lnr, token for token from @_lexer.walk row.line\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_generation: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:generation'\n    send stamp d\n    send lets d, ( d ) -> d.value = if ( /^\\d$/.test d.value ) then parseInt d.value, 10 else 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_comment: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:comment'\n    send stamp d\n    send lets d, ( d ) -> d.value = d.value.trim()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_prompt: ->\n    parts = null\n    lnr   = null\n    #.......................................................................................................\n    return ( d, send ) =>\n      return send d if d.$stamped\n      #.....................................................................................................\n      if d is start_of_line\n        parts = []\n        return send d\n      #.....................................................................................................\n      if d is end_of_line\n        ### TAINT use Datom API ###\n        token = { $key: 'prompt', value: ( parts.join [] ), lnr, }\n        parts = lnr = null\n        send token\n        return send d\n      #.....................................................................................................\n      return send d unless d.$key?.startsWith 'plain:'\n      #.....................................................................................................\n      lnr ?= d.lnr1\n      parts.push d.value\n      return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $normalize_prompt: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'prompt'\n    send stamp d\n    send lets d, ( d ) -> d.value = U.normalize_prompt d.value\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $filter_matching_prompts: ->\n    parts = null\n    return ( d, send ) =>\n      return send d if d.$stamped\n      #.....................................................................................................\n      if d is start_of_line\n        parts = []\n        return null\n      #.....................................................................................................\n      if d is end_of_line\n        if parts?\n          send start_of_line\n          send part for part in parts\n          send end_of_line\n        return null\n      #.....................................................................................................\n      if @cfg.match? and d.$key is 'prompt'\n        @cfg.match.lastIndex = 0 ### TAINT ensure this becomes superfluous ###\n        unless @cfg.match.test d.value\n          @state.counts.non_matches++\n          parts = null\n          return null\n      #.....................................................................................................\n      parts.push d\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_generations: ->\n    ### TAINT code duplication ###\n    parts = null\n    lnr   = null\n    #.......................................................................................................\n    return ( d, send ) =>\n      return send d if d.$stamped\n      #.....................................................................................................\n      if d is start_of_line\n        parts = []\n        return send d\n      #.....................................................................................................\n      if d is end_of_line\n        ### TAINT use Datom API ###\n        token = { $key: 'generations', value: parts, lnr, }\n        parts = lnr = null\n        send token\n        return send d\n      #.....................................................................................................\n      # return send d unless d.$key in [ 'marks:format', 'marks:generation', ]\n      return send d unless d.$key in [ 'marks:generation', ]\n      #.....................................................................................................\n      lnr ?= d.lnr1\n      parts.push d.value\n      return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_comments: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:comment'\n    send lets d, ( d ) -> d.$key = 'comment'\n    return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_rejected: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:wording'\n    send lets d, ( d ) -> d.$key = 'rejected'; d.value = true\n    return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $consolidate_promptnr: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'marks:promptnr'\n    send lets d, ( d ) -> d.$key = 'promptnr'\n    return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $add_prompt_id: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'prompt'\n    send d\n    send lets d, ( d ) -> d.$key = 'prompt_id'; d.value = U.id_from_text d.value\n\n  #---------------------------------------------------------------------------------------------------------\n  $assemble_prerecords: ( d, send ) ->\n    ### TAINT code duplication ###\n    prerecord   = null\n    current_lnr = null\n    #.......................................................................................................\n    return ( d, send ) =>\n      return send d if d.$stamped\n      #.....................................................................................................\n      if d is start_of_line\n        prerecord = @types.create.pp_prerecord_initial()\n        return send d\n      #.....................................................................................................\n      if d is end_of_line\n        ### TAINT use Datom API ###\n        prerecord.lnr ?= current_lnr\n        prerecord.lnr ?= 1\n        send @types.create.pp_prerecord_final prerecord\n        prerecord = null\n        return send d\n      #.....................................................................................................\n      return send d unless d.$key in [ 'prompt', 'prompt_id', 'generations', 'comment', 'promptnr', 'rejected', ]\n      #.....................................................................................................\n      if d.lnr?\n        current_lnr         = d.lnr\n        prerecord.lnr       = d.lnr\n      prerecord[ d.$key ] = d.value\n      return send stamp d\n\n  #---------------------------------------------------------------------------------------------------------\n  $assemble_generation_records: ->\n    prompt_id = null\n    nrs       = new Map()\n    #.......................................................................................................\n    return ( d, send ) =>\n      return send d if d.$stamped\n      return send d unless d.$key is 'prerecord'\n      send d\n      #.....................................................................................................\n      ### TAINT hide this in custom class ###\n      prompt_id = d.prompt_id\n      unless ( nr = nrs.get prompt_id )?\n        nrs.set prompt_id, 0\n        nr = 0\n      #.....................................................................................................\n      for count in d.generations\n        nr++\n        send { $key: 'record', prompt_id, table: 'generations', fields: { prompt_id, nr, count, }, }\n      nrs.set prompt_id, nr\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $assemble_prompt_records: -> ( d, send ) =>\n    return send d if d.$stamped\n    return send d unless d.$key is 'prerecord'\n    send d\n    fields =\n      id:         d.prompt_id\n      lnr:        d.lnr\n      prompt:     d.prompt\n      comment:    d.comment\n      rejected:   d.rejected\n    send { $key: 'record', prompt_id: d.prompt_id, table: 'prompts', fields, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $show: -> ( d ) =>\n    # urge 'Ω___3', rpr d # if d.$key is 'generation'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $stamp_extraneous: -> ( d, send ) =>\n    switch true\n      when d.$key isnt 'record'         then  send  stamp d\n      else                                    send        d\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $filter_stamped: -> ( d, send ) =>\n    send d if ( d isnt start_of_line ) and ( d isnt end_of_line ) and ( not d.$stamped )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $count: -> ( d ) =>\n    # urge 'Ω___4', d\n    if d.$key is 'source' then  @state.counts.prompts++\n    else                        @state.counts.lexemes++\n    return null\n\n\n###\n\n8888888888 8888888 888      8888888888   8888888b.  8888888888        d8888  8888888b.  8888888888 8888888b.\n888          888   888      888          888   Y88b 888              d88888  888  \"Y88b 888        888   Y88b\n888          888   888      888          888    888 888             d88P888  888    888 888        888    888\n8888888      888   888      8888888      888   d88P 8888888        d88P 888  888    888 8888888    888   d88P\n888          888   888      888          8888888P\"  888           d88P  888  888    888 888        8888888P\"\n888          888   888      888          888 T88b   888          d88P   888  888    888 888        888 T88b\n888          888   888      888          888  T88b  888         d8888888888  888  .d88P 888        888  T88b\n888        8888888 88888888 8888888888   888   T88b 8888888888 d88P     888  8888888P\"  8888888888 888   T88b\n\n###\n\n#===========================================================================================================\nclass Prompt_file_reader extends File_mirror\n\n  #---------------------------------------------------------------------------------------------------------\n  @required_table_names = [ 'prompts', 'generations', ]\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT use CFG pattern, namespacing as in `file_mirror.path`, validation ###\n  constructor: ( cmd, flags = null ) ->\n    types           = get_types()\n    cfg             = types.create.pfr_constructor_cfg cmd, flags, null\n    super cfg.db_path, cfg.datasource_path, ( flags?.trash_db ? false )\n    ### TAINT try to avoid constructing almost the same object twice ###\n    @cfg            = @types.create.pfr_constructor_cfg cmd, flags, @cfg\n    @_prompt_parser = new Prompt_parser @cfg.flags.match\n    @_pipeline      = new Pipeline()\n    @_pipeline.push @_prompt_parser\n    #.......................................................................................................\n    ### TAINT rather ad-hoc ###\n    hide @, 'insert_into', insert_into = {}\n    insert_into[ key ] = ( f.bind @ ) for key, f of @constructor.insert_into\n    #.......................................................................................................\n    @_populate_db_if_necessary() if new.target is Prompt_file_reader\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    super()\n    whisper 'Ω__11', \"Prompt_file_reader::_create_db_structure\"\n    @_db =>\n      @_db SQL\"\"\"\n        create table prompts (\n            id        text    not null primary key,\n            lnr       integer not null,\n            prompt    text    not null,\n            comment   text        null,\n            rejected  boolean not null,\n          unique( prompt ) );\"\"\"\n      @_db SQL\"\"\"\n        create table generations (\n            prompt_id text    not null,\n            nr        integer not null,\n            count     integer not null,\n          primary key ( prompt_id, nr ),\n          foreign key ( prompt_id ) references prompts ( id ) );\"\"\"\n      @_db SQL\"\"\"\n        create view counts as select distinct\n            prompt_id             as prompt_id,\n            count(*)      over w  as generations,\n            sum( count )  over w  as images\n          from generations as g\n          window w as ( partition by prompt_id );\"\"\"\n      @_db SQL\"\"\"\n        create view densities as select\n            c.prompt_id                                                                         as prompt_id,\n            c.generations                                                                       as generations,\n            c.images                                                                            as images,\n            cast( ( ( cast( c.images as real ) / c.generations / 4 ) * 100 + 0.5 ) as integer ) as density\n          from generations as g\n          left join counts as c on ( g.prompt_id = c.prompt_id );\"\"\"\n      @_db SQL\"\"\"\n        create view promptstats as select distinct\n            d.prompt_id     as prompt_id,\n            d.generations   as generations,\n            d.images        as images,\n            d.density       as density,\n            p.lnr           as lnr,\n            p.prompt        as prompt\n          from prompts    as p\n          join densities  as d on ( p.id = d.prompt_id );\"\"\"\n      @_db SQL\"\"\"\n        create view rowcounts as\n          select            null as name,         null as rowcount where false\n          union all select  'prompts',            count(*)                from prompts\n          union all select  'generations',        count(*)                from generations\n          union all select  'counts',             count(*)                from counts\n          union all select  'densities',          count(*)                from densities\n          ;\"\"\"\n      ### TAINT auto-generate ###\n      hide @, '_insert_into',\n        datasources:  @_db.create_insert { into: 'datasources',                                  }\n        prompts:      @_db.create_insert { into: 'prompts',      on_conflict: { update: true, }, }\n        generations:  @_db.create_insert { into: 'generations',                                  }\n      return null\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT this should become a standard part of `DBay`; note that as with `@_required_table_names`,\n  one should walk the prototype chain ###\n  @insert_into:\n    #.......................................................................................................\n    datasources: ( d ) ->\n      ### TAINT validate? ###\n      return @_db.alt @_insert_into.datasources, d\n    #.......................................................................................................\n    prompts: ( d ) ->\n      ### TAINT validate? ###\n      return @_db.alt @_insert_into.prompts, lets d, ( d ) ->\n        d.rejected = if d.rejected is true then 1 else 0\n    #.......................................................................................................\n    generations: ( d ) ->\n      ### TAINT validate? ###\n      return @_db.alt @_insert_into.generations, d\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_db: ->\n    whisper 'Ω__12', \"Prompt_file_reader::_populate_db\"\n    super()\n    line_count              = 0\n    blank_line_count        = 0\n    read_prompt_count       = 0\n    written_prompt_count    = 0\n    unique_row_ids          = new Set()\n    nonmatching_line_count  = 0\n    unsampled_line_count    = 0\n    #.......................................................................................................\n    ### NOTE pre-caching source rows because it is fast, probably fits into available RAM, and results in\n    much faster write performance. As such, concurrent writes are *still* a bit of a hurdle with SQLite. ###\n    all_rows = @_db.all_rows SQL\"\"\"select * from datasources order by lnr;\"\"\" ### TAINT use API ###\n    whisper 'Ω__13', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n      \"read #{U.format_nr all_rows.length} lines from DB\"\n    #.......................................................................................................\n    do =>\n      ### NOTE this could / should be within a transaction but runs just as fast without one ###\n      for row in all_rows\n        line_count++\n        whisper 'Ω__14', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n          \"line count: #{U.format_nr line_count, 8}\" if line_count %% 1e3 is 0\n        #...................................................................................................\n        ### EXCLUDE EMPTY LINES ###\n        if /^\\s*$/.test row.line\n          blank_line_count++\n          continue\n        #...................................................................................................\n        ### --SAMPLE ###\n        if Math.random() > @cfg.flags.sample\n          unsampled_line_count++\n          continue\n        #...................................................................................................\n        ### --MATCH ###\n        if @cfg.flags.pre_match?\n          @cfg.flags.pre_match.lastIndex = 0 ### TAINT ensure when constructing pre_match that lastIndex is never used ###\n          unless @cfg.flags.pre_match.test row.line\n            nonmatching_line_count++\n            continue\n        #...................................................................................................\n        @_pipeline.send row\n        #...................................................................................................\n        for record from @_pipeline.walk()\n          #.................................................................................................\n          if record.table is 'prompts'\n            read_prompt_count++\n          #.................................................................................................\n          { lastInsertRowid: row_id, } = @insert_into[ record.table ] record.fields\n          if record.table is 'prompts'\n            unique_row_ids.add row_id\n            written_prompt_count = unique_row_ids.size\n        #...................................................................................................\n        ### --MAX-COUNT ###\n        if written_prompt_count >= @cfg.flags.max_count\n          whisper 'Ω__15', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n            \"stopping because prompt count exceeds max prompt count of #{U.format_nr @cfg.flags.max_count} prompts\"\n          break\n      return null\n    #.......................................................................................................\n    written_prompt_count = @_db.single_value SQL\"\"\"select count(*) from prompts;\"\"\" ### TAINT use API ###\n    #.......................................................................................................\n    whisper 'Ω__16'\n    whisper 'Ω__17', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n      \"line count:                    +#{U.format_nr line_count, 12}\"\n    #.......................................................................................................\n    whisper 'Ω__18', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n      \"blank line count:              –#{U.format_nr blank_line_count, 12}\"\n    #.......................................................................................................\n    whisper 'Ω__19', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n      \"'unsampled' line count:        –#{U.format_nr unsampled_line_count, 12}\"\n    #.......................................................................................................\n    whisper 'Ω__20', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n      \"non-pre-matching line count:   –#{U.format_nr nonmatching_line_count, 12}\"\n    #.......................................................................................................\n    whisper 'Ω__21', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n      \"non-matching prompt count:     –#{U.format_nr @_prompt_parser.state.counts.non_matches, 12}\"\n    #.......................................................................................................\n    whisper 'Ω__22', \"Prompt_file_reader::_populate_db\", GUY.trm.white \\\n      \"inserted #{U.format_nr written_prompt_count} rows into DB at #{@cfg.db_path}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_all_records: ( source ) ->\n    R = []\n    for { lnr, line, eol, } from GUY.str.walk_lines_with_positions source\n      @_pipeline.send { lnr, line, }\n      R = R.concat @_pipeline.run()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_first_records: ( source ) ->\n    prompt_id = null\n    R         = []\n    for record from @parse_all_records source\n      prompt_id ?= record.prompt_id\n      break unless prompt_id is record.prompt_id\n      R.push record\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_all_tokens: ( source ) ->\n    R = []\n    for { lnr, line, eol, } from GUY.str.walk_lines_with_positions source\n      for token from @_prompt_parser._lexer.walk line\n        continue if @types.isa.symbol token\n        R.push @_prompt_parser._cast_token lnr, token\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_first_tokens: ( source ) ->\n    R     = []\n    lnr1  = null\n    for token from @parse_all_tokens source\n      lnr1 ?= token.lnr1\n      break if lnr1 isnt token.lnr1\n      R.push token\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  insert: ( insertion_records ) ->\n    insertion_records = @types.create.fm_insertion_records insertion_records\n    R = 0\n    for insertion_record in insertion_records\n       change_record = @insert_into[ insertion_record.table ] insertion_record.fields\n       R += change_record.changes\n    return R\n\n###\n\n8888888888  .d88888b.  8888888888\n888        d88P\" \"Y88b 888\n888        888     888 888\n8888888    888     888 8888888\n888        888     888 888\n888        888     888 888\n888        Y88b. .d88P 888\n8888888888  \"Y88888P\"  888\n\n###\n\n\n#===========================================================================================================\nmodule.exports = {\n  new_prompt_lexer,\n  File_mirror,\n  Prompt_file_reader, }\n\n#===========================================================================================================\nif module is require.main then await do =>\n  echo()\n  echo ( GUY.trm.grey 'Ω__23' ), ( GUY.trm.gold \"run `node lib/cli.js help` instead of this file\" )\n  echo()\n  process.exit 111\n"
  ]
}
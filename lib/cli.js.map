{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/cli'\n#...........................................................................................................\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ hide }                  = GUY.props\n#...........................................................................................................\n# PATH                      = require 'node:path'\n# FS                        = require 'node:fs'\n{ get_types }             = require './types'\ntypes                     = get_types()\nMIXA                      = require 'mixa'\nWG                        = require 'webguy'\n{ U }                     = require './utilities'\n\n\n#===========================================================================================================\nreturn_error = ( flag_name, create ) -> ( x ) -> try create x catch error then new Failure flag_name, x\n\n\n#===========================================================================================================\nclass Failure\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( flag_name, value ) ->\n    @flag_name  = flag_name\n    @value      = value\n    @message    = \"#{rpr value} is not a valid setting for flag `--#{flag_name}`\"\n    return undefined\n\n\n#===========================================================================================================\nclass Mixa\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( process_argv = null ) ->\n    ### TAINT monkeypatch so we can use new flag property ###\n    delete MIXA.types.specs.mixa_flagdef.tests[ \"x has only keys 'type', 'alias', 'description', 'multiple', 'fallback', 'positional'\" ]\n    ### TAINT do these steps in MIXA ###\n    @_compile_runners_and_cmds()\n    @_use_hyphenated_names()\n    @process_argv             = process_argv ? process.argv\n    #.......................................................................................................\n    job                       = MIXA.run @jobdef, @process_argv\n    @extra_flags              = job.verdict.extra_flags ? []\n    @cmd                      = job.verdict.cmd\n    @flags                    = job.verdict.parameters  ?= {}\n    @error                    = job.verdict.error       ?= null\n    @_supply_missing_flags()\n    @_validate_flags()\n    @_use_underscore_names()\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_runners_and_cmds: ->\n    @_runners               = {}\n    @jobdef.commands       ?= {}\n    @jobdef.commands.help  ?= {}\n    #.......................................................................................................\n    for cmd, cmd_def of @jobdef.commands\n      runner_name = \"cmd_#{cmd}\"\n      #.....................................................................................................\n      ### accept `null` in commands as a placeholder ###\n      @jobdef.commands[ cmd ] ?= ( cmd_def = {} )\n      #.....................................................................................................\n      ### disallow previously allowed 'runners' in command definitions ###\n      if cmd_def.runner?\n        throw new Error \"Ω___1 in declaration of cmd #{rpr cmd}, do not use property `runner`; \" + \\\n          \"instead, declare method #{rpr runner_name} in class #{@constructor.name}\"\n      #.....................................................................................................\n      ### validate that runner exists on instance ###\n      unless ( runner = @[ runner_name ] )?\n        throw new Error \"Ω___2 in declaration of cmd #{rpr cmd}: \" + \\\n          \"missing method #{rpr runner_name} in class #{@constructor.name}\"\n    #.......................................................................................................\n    ### supply command definitions for runners without entry in jobdef ###\n    # for runner_name, runner of @\n    # GUY.props\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _use_hyphenated_names: ->\n    ### TAINT use separate object for these ###\n    for cmd, cmd_def of @jobdef.commands\n      delete @jobdef.commands[ cmd ]\n      @jobdef.commands[ cmd.replace /_/g, '-' ] = cmd_def\n      for name, flag_def of cmd_def?.flags ? []\n        delete cmd_def.flags[ name ]\n        cmd_def.flags[ name.replace /_/g, '-' ] = flag_def\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _use_underscore_names: ->\n    ### TAINT use separate object for these ###\n    @cmd = @cmd.replace /-/g, '_'\n    for name, value of @flags\n      delete @flags[ name ]\n      @flags[ name.replace /-/g, '_' ] = value\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _supply_missing_flags: ->\n    cmd_def               = @jobdef.commands[ @cmd ]\n    for flag_name, flag_def of cmd_def.flags ? {}\n      continue if Reflect.has @flags, flag_name\n      @flags[ flag_name ] = flag_def.type null ### TAINT should call `create` ###\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_flags: ->\n    failed_flags = []\n    for flag_name, flag_value of @flags\n      if flag_value instanceof Failure\n        failure = flag_value\n        failed_flags.push \"`--#{flag_name}`\"\n        echo()\n        echo '🔴', GUY.trm.bold \" #{failure.message} \"\n        flag_def  = @jobdef.commands[ @cmd ].flags[ flag_name ]\n        if ( expect = flag_def.expect )?\n          echo U.color.expect \"expected #{expect}\"\n          echo GUY.trm.bold \"got #{rpr failure.value}\"\n    #.......................................................................................................\n    if failed_flags.length > 0\n      echo()\n      failed_flag_names = failed_flags.join ', '\n      if failed_flags.length is 1\n        echo GUY.trm.red GUY.trm.reverse GUY.trm.bold \" flag #{failed_flag_names} has an incorrect setting, see above \"\n      else\n        echo GUY.trm.red GUY.trm.reverse GUY.trm.bold \" flags #{failed_flag_names} have incorrect settings, see above \"\n      process.exit 111\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT the ordering stuff done here should be performed by a jobdef compilation step ###\n  _list_of_flags_for_cmd: ( cmd ) -> ( flag for flag of @jobdef.commands[ cmd ].flags ).sort()\n\n  #---------------------------------------------------------------------------------------------------------\n  cmd_help: ->\n    status = 0\n    if @error?\n      status = 1\n      warn 'Ω___3', GUY.trm.reverse \" #{@error.tag}: #{@error.message} \"\n      if @error.tag is 'EXTRA_FLAGS'\n        if @extra_flags.length > 0\n          echo GUY.trm.red \"found #{@extra_flags.length} extraneous flag(s)\"\n          for flag in @extra_flags\n            echo GUY.trm.red \"  * extraneous flag #{U.color.bad rpr flag}\"\n    #.......................................................................................................\n    ### TAINT the ordering stuff done here should be performed by a jobdef compilation step ###\n    help GUY.trm.grey 'Ω___4'\n    echo GUY.trm.lime \"The following sub-commands are available:\"\n    cmds = ( cmd for cmd of @jobdef.commands ).sort()\n    for cmd in cmds\n      cmd_def     = @jobdef.commands[ cmd ]\n      flags       = @_list_of_flags_for_cmd cmd\n      description = @jobdef.commands[ cmd ].description ? ( if cmd is 'help' then \"show this message\" else '?' )\n      echo \" #{U.color.cmd cmd} #{U.color.description description}\"\n      for flag in flags\n        flag_def    = cmd_def.flags[ flag ]\n        description = flag_def.description ? '?'\n        echo \"   #{U.color.flag '--' + flag} #{U.color.description description}\"\n        if ( expect = flag_def.expect )?\n          echo \"     #{U.color.expect 'expects ' + expect}\"\n    process.exit status\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  run: ->\n    runner_name   = \"cmd_#{@cmd}\"\n    @[ runner_name ].call @\n    return null\n\n\n#===========================================================================================================\nclass Promptparser_cli extends Mixa\n\n  #---------------------------------------------------------------------------------------------------------\n  jobdef:\n    exit_on_error:  false\n    commands:\n      # refresh:\n      #   description:    \"refresh database\"\n      #   allow_extra:    false\n      #   flags:\n      #     # $name:\n      #     #   type:           function\n      #     #   alias:          text\n      #     #   description:    text\n      #     #   multiple:       [ null, false, 'greedy', 'lazy', ]\n      #     #   positional:     boolean\n      #     #   fallback:       anything\n      #     max_count:\n      #       type:           return_error 'max_count', types.create.cli_max_count.bind types.create\n      #       alias:          'x'\n      #       description:    \"processing will be short-cut after this many prompts\"\n      #       multiple:       false # [ null, false, 'greedy', 'lazy', ]\n      #       positional:     false # boolean\n      #       fallback:       Infinity ### TAINT `fallback` repeated as `template` in types ###\n      build:\n        description: \"build DB from prompts path given\"\n        flags:\n          max_count:\n            description:    \"maximum number of unique prompts to add to the DB after filtering and matching\"\n            expect:         \"an integer number such as `1439`; may use exponential notation as in `1.5e3`\"\n            type:           return_error 'max_count', types.create.cli_max_count.bind types.create\n          sample:\n            description:    \"a ratio to indicate the approximate ratio of source lines to randomly accept; precedes `--match`es\"\n            expect:         \"a fraction as in `20/1000` or `0.02`, or a percentage as in `2%`\"\n            type:           return_error 'sample',    types.create.cli_sample.bind    types.create\n          seed:\n            description:    \"(when `--sample` is given) a seed to initialize the random number generator\"\n            expect:         \"any float, for example `-67.43` or `39382.1`\"\n            type:           return_error 'seed',      types.create.cli_seed.bind    types.create\n          pre_match:\n            description:    \"only keep raw lines that match this RegEx; defaults to selecting lines that start with square brackets, non-empty prompt text\"\n            expect:         \"a legal JavaScript literal to be used in `new RegExp()`; slashes will be interpreted literally\"\n            type:           return_error 'pre_match', types.create.cli_pre_match.bind  types.create\n          match:\n            description:    \"only keep prompts that match this RegEx; applies after `--pre-match`, `--sample`\"\n            expect:         \"a legal JavaScript literal to be used in `new RegExp()`; slashes will be interpreted literally\"\n            type:           return_error 'match',     types.create.cli_match.bind     types.create\n          trash_db:\n            description:    \"whether to move existing DB file to trash\"\n            expect:         \"`true` or `false`; default is `false`\"\n            type:           return_error 'trash_db', types.create.cli_trash_db.bind types.create\n          db:\n            description:    \"path to DB\"\n            expect:         \"path that points to either an unused file name in an existing folder or a valid SQLite DB file\"\n            type:           return_error 'db',        types.create.cli_db.bind        types.create\n          prompts:\n            description:    \"prompts\"\n            expect:         \"file system path that points to a file containing the prompts to be processed\"\n            type:           return_error 'prompts',   types.create.cli_prompts.bind   types.create\n            positional:     true\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_prompt_file_reader: ( cmd = null, flags = null ) ->\n    { Prompt_file_reader, } = require './production-registry'\n    return new Prompt_file_reader ( cmd ? @cmd ), ( flags ? @flags )\n\n  # #---------------------------------------------------------------------------------------------------------\n  # cmd_nosuch: ->\n  #   help 'Ω___5', \"cmd_nosuch\", @flags\n  #   return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # cmd_refresh: ->\n  #   help 'Ω___6', \"cmd_refresh\", @flags\n  #   pfr = @_new_prompt_file_reader()\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  cmd_build: ->\n    help 'Ω___7', \"cmd_build\", @flags\n    pfr = @_new_prompt_file_reader()\n    return null\n\n\n#===========================================================================================================\nrun = ( process_argv = null ) ->\n  cli = new Promptparser_cli process_argv ? process.argv\n  info 'Ω___9', \"running command: #{GUY.trm.gold cli.cmd} #{GUY.trm.lime rpr cli.flags}\"\n  await cli.run() ### using `await` to demonstrate generally command execution may be async ###\n  return null\n\n\n#===========================================================================================================\nif module is require.main then  await run()                                 ### command line  use ###\nelse                            module.exports = { run, Promptparser_cli, } ### programmatic  use ###\n\n"
  ]
}